package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Outbreak represents a row from 'public.outbreaks'.
type Outbreak struct {
	ID          int             `json:"id"`           // id
	Name        sql.NullString  `json:"name"`         // name
	Description sql.NullString  `json:"description"`  // description
	StartDate   sql.NullTime    `json:"start_date"`   // start_date
	EndDate     sql.NullTime    `json:"end_date"`     // end_date
	Status      sql.NullString  `json:"status"`       // status
	EnterOn     sql.NullTime    `json:"enter_on"`     // enter_on
	EnterBy     sql.NullInt64   `json:"enter_by"`     // enter_by
	EditOn      sql.NullTime    `json:"edit_on"`      // edit_on
	EditBy      sql.NullInt64   `json:"edit_by"`      // edit_by
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Outbreak] exists in the database.
func (o *Outbreak) Exists() bool {
	return o._exists
}

// Deleted returns true when the [Outbreak] has been marked for deletion
// from the database.
func (o *Outbreak) Deleted() bool {
	return o._deleted
}

// Insert inserts the [Outbreak] to the database.
func (o *Outbreak) Insert(ctx context.Context, db DB) error {
	switch {
	case o._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case o._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.outbreaks (` +
		`name, description, start_date, end_date, status, enter_on, enter_by, edit_on, edit_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, o.Name, o.Description, o.StartDate, o.EndDate, o.Status, o.EnterOn, o.EnterBy, o.EditOn, o.EditBy)
	if err := db.QueryRowContext(ctx, sqlstr, o.Name, o.Description, o.StartDate, o.EndDate, o.Status, o.EnterOn, o.EnterBy, o.EditOn, o.EditBy).Scan(&o.ID); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Update updates a [Outbreak] in the database.
func (o *Outbreak) Update(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case o._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.outbreaks SET ` +
		`name = $1, description = $2, start_date = $3, end_date = $4, status = $5, enter_on = $6, enter_by = $7, edit_on = $8, edit_by = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, o.Name, o.Description, o.StartDate, o.EndDate, o.Status, o.EnterOn, o.EnterBy, o.EditOn, o.EditBy, o.ID)
	if _, err := db.ExecContext(ctx, sqlstr, o.Name, o.Description, o.StartDate, o.EndDate, o.Status, o.EnterOn, o.EnterBy, o.EditOn, o.EditBy, o.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Outbreak] to the database.
func (o *Outbreak) Save(ctx context.Context, db DB) error {
	if o.Exists() {
		return o.Update(ctx, db)
	}
	return o.Insert(ctx, db)
}

// Delete deletes the [Outbreak] from the database.
func (o *Outbreak) Delete(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return nil
	case o._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.outbreaks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, o.ID)
	if _, err := db.ExecContext(ctx, sqlstr, o.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	o._deleted = true
	return nil
}

// OutbreakByID retrieves a row from 'public.outbreaks' as a [Outbreak].
func OutbreakByID(ctx context.Context, db DB, id int) (*Outbreak, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, description, start_date, end_date, status, enter_on, enter_by, edit_on, edit_by ` +
		`FROM public.outbreaks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	o := Outbreak{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&o.ID, &o.Name, &o.Description, &o.StartDate, &o.EndDate, &o.Status, &o.EnterOn, &o.EnterBy, &o.EditOn, &o.EditBy); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

// GetActiveOutbreaks retrieves all active outbreaks
func GetActiveOutbreaks(ctx context.Context, db DB) ([]*Outbreak, error) {
	const sqlstr = `SELECT ` +
		`id, name, description, start_date, end_date, status, enter_on, enter_by, edit_on, edit_by ` +
		`FROM public.outbreaks ` +
		`WHERE status != 'closed' ` +
		`ORDER BY start_date DESC`
	
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	var outbreaks []*Outbreak
	for rows.Next() {
		o := Outbreak{
			_exists: true,
		}
		if err := rows.Scan(&o.ID, &o.Name, &o.Description, &o.StartDate, &o.EndDate, &o.Status, &o.EnterOn, &o.EnterBy, &o.EditOn, &o.EditBy); err != nil {
			return nil, logerror(err)
		}
		outbreaks = append(outbreaks, &o)
	}
	return outbreaks, nil
}

// GetDefaultOutbreak retrieves the default outbreak (Ebola 2025)
func GetDefaultOutbreak(ctx context.Context, db DB) (*Outbreak, error) {
	const sqlstr = `SELECT ` +
		`id, name, description, start_date, end_date, status, enter_on, enter_by, edit_on, edit_by ` +
		`FROM public.outbreaks ` +
		`WHERE name = 'Ebola 2025' ` +
		`LIMIT 1`
	
	o := Outbreak{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr).Scan(&o.ID, &o.Name, &o.Description, &o.StartDate, &o.EndDate, &o.Status, &o.EnterOn, &o.EnterBy, &o.EditOn, &o.EditBy); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
} 