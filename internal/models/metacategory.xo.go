package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// MetaCategory represents a row from 'public.meta_category'.
type MetaCategory struct {
	MetaCategoryID   int            `json:"meta_category_id"`   // meta_category_id
	MetaCategoryName sql.NullString `json:"meta_category_name"` // meta_category_name
	MetaCategoryType sql.NullString `json:"meta_category_type"` // meta_category_type
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [MetaCategory] exists in the database.
func (mc *MetaCategory) Exists() bool {
	return mc._exists
}

// Deleted returns true when the [MetaCategory] has been marked for deletion
// from the database.
func (mc *MetaCategory) Deleted() bool {
	return mc._deleted
}

// Insert inserts the [MetaCategory] to the database.
func (mc *MetaCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case mc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case mc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.meta_category (` +
		`meta_category_name, meta_category_type` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING meta_category_id`
	// run
	logf(sqlstr, mc.MetaCategoryName, mc.MetaCategoryType)
	if err := db.QueryRowContext(ctx, sqlstr, mc.MetaCategoryName, mc.MetaCategoryType).Scan(&mc.MetaCategoryID); err != nil {
		return logerror(err)
	}
	// set exists
	mc._exists = true
	return nil
}

// Update updates a [MetaCategory] in the database.
func (mc *MetaCategory) Update(ctx context.Context, db DB) error {
	switch {
	case !mc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case mc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.meta_category SET ` +
		`meta_category_name = $1, meta_category_type = $2 ` +
		`WHERE meta_category_id = $3`
	// run
	logf(sqlstr, mc.MetaCategoryName, mc.MetaCategoryType, mc.MetaCategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, mc.MetaCategoryName, mc.MetaCategoryType, mc.MetaCategoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [MetaCategory] to the database.
func (mc *MetaCategory) Save(ctx context.Context, db DB) error {
	if mc.Exists() {
		return mc.Update(ctx, db)
	}
	return mc.Insert(ctx, db)
}

// Upsert performs an upsert for [MetaCategory].
func (mc *MetaCategory) Upsert(ctx context.Context, db DB) error {
	switch {
	case mc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.meta_category (` +
		`meta_category_id, meta_category_name, meta_category_type` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (meta_category_id) DO ` +
		`UPDATE SET ` +
		`meta_category_name = EXCLUDED.meta_category_name, meta_category_type = EXCLUDED.meta_category_type `
	// run
	logf(sqlstr, mc.MetaCategoryID, mc.MetaCategoryName, mc.MetaCategoryType)
	if _, err := db.ExecContext(ctx, sqlstr, mc.MetaCategoryID, mc.MetaCategoryName, mc.MetaCategoryType); err != nil {
		return logerror(err)
	}
	// set exists
	mc._exists = true
	return nil
}

// Delete deletes the [MetaCategory] from the database.
func (mc *MetaCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !mc._exists: // doesn't exist
		return nil
	case mc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.meta_category ` +
		`WHERE meta_category_id = $1`
	// run
	logf(sqlstr, mc.MetaCategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, mc.MetaCategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	mc._deleted = true
	return nil
}

// MetaCategoryByMetaCategoryID retrieves a row from 'public.meta_category' as a [MetaCategory].
//
// Generated from index 'meta_category_pkey'.
func MetaCategoryByMetaCategoryID(ctx context.Context, db DB, metaCategoryID int) (*MetaCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`meta_category_id, meta_category_name, meta_category_type ` +
		`FROM public.meta_category ` +
		`WHERE meta_category_id = $1`
	// run
	logf(sqlstr, metaCategoryID)
	mc := MetaCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, metaCategoryID).Scan(&mc.MetaCategoryID, &mc.MetaCategoryName, &mc.MetaCategoryType); err != nil {
		return nil, logerror(err)
	}
	return &mc, nil
}
