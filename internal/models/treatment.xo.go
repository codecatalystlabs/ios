package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Treatment represents a row from 'public.treatment'.
type Treatment struct {
	TreatmentID                 int             `json:"treatment_id"`                  // treatment_id
	EncounterID                 sql.NullInt64   `json:"encounter_id"`                  // encounter_id
	Antibacterial               sql.NullInt64   `json:"antibacterial"`                 // antibacterial
	Amoxicillin                 sql.NullInt64   `json:"amoxicillin"`                   // amoxicillin
	Ceftriaxone                 sql.NullInt64   `json:"ceftriaxone"`                   // ceftriaxone
	Cefixime                    sql.NullInt64   `json:"cefixime"`                      // cefixime
	AntibacterialOther          sql.NullString  `json:"antibacterial_other"`           // antibacterial_other
	AntibacterialDose           sql.NullString  `json:"antibacterial_dose"`            // antibacterial_dose
	AntibacterialRoute          sql.NullString  `json:"antibacterial_route"`           // antibacterial_route
	AntibacterialFreq           sql.NullString  `json:"antibacterial_freq"`            // antibacterial_freq
	Antimalarial                sql.NullInt64   `json:"antimalarial"`                  // antimalarial
	AntimalarialArtesunate      sql.NullInt64   `json:"antimalarial_artesunate"`       // antimalarial_artesunate
	AntimalarialArthemeter      sql.NullInt64   `json:"antimalarial_arthemeter"`       // antimalarial_arthemeter
	AntimalarialAl              sql.NullInt64   `json:"antimalarial_al"`               // antimalarial_al
	AntimalarialAa              sql.NullInt64   `json:"antimalarial_aa"`               // antimalarial_aa
	AntimalarialDose            sql.NullString  `json:"antimalarial_dose"`             // antimalarial_dose
	AntimalarialRoute           sql.NullString  `json:"antimalarial_route"`            // antimalarial_route
	AntimalarialFreq            sql.NullString  `json:"antimalarial_freq"`             // antimalarial_freq
	OtherMedsSpecify            sql.NullString  `json:"other_meds_specify"`            // other_meds_specify
	OtherMedsDose               sql.NullString  `json:"other_meds_dose"`               // other_meds_dose
	OtherMedsRoute              sql.NullString  `json:"other_meds_route"`              // other_meds_route
	OtherMedsFreq               sql.NullString  `json:"other_meds_freq"`               // other_meds_freq
	EbolaExperimental           sql.NullInt64   `json:"ebola_experimental"`            // ebola_experimental
	EbolaExperimentalIf         sql.NullString  `json:"ebola_experimental_if"`         // ebola_experimental_if
	Oral                        sql.NullInt64   `json:"oral"`                          // oral
	OralOrs                     sql.NullInt64   `json:"oral_ors"`                      // oral_ors
	OralOrsQty                  sql.NullFloat64 `json:"oral_ors_qty"`                  // oral_ors_qty
	OralWater                   sql.NullInt64   `json:"oral_water"`                    // oral_water
	OralWaterQty                sql.NullFloat64 `json:"oral_water_qty"`                // oral_water_qty
	OralOther                   sql.NullInt64   `json:"oral_other"`                    // oral_other
	OralOtherQty                sql.NullFloat64 `json:"oral_other_qty"`                // oral_other_qty
	Iv                          sql.NullInt64   `json:"iv"`                            // iv
	IvQty                       sql.NullString  `json:"iv_qty"`                        // iv_qty
	IvUsing                     sql.NullString  `json:"iv_using"`                      // iv_using
	IvAza                       sql.NullString  `json:"iv_aza"`                        // iv_aza
	AccessType                  sql.NullInt64   `json:"access_type"`                   // access_type
	BloodTrans                  sql.NullInt64   `json:"blood_trans"`                   // blood_trans
	OxygenTherapy               sql.NullInt64   `json:"oxygen_therapy"`                // oxygen_therapy
	OxygenQty                   sql.NullFloat64 `json:"oxygen_qty"`                    // oxygen_qty
	OxygenWith                  sql.NullString  `json:"oxygen_with"`                   // oxygen_with
	Vasopressors                sql.NullInt64   `json:"vasopressors"`                  // vasopressors
	Renal                       sql.NullInt64   `json:"renal"`                         // renal
	Invasive                    sql.NullInt64   `json:"invasive"`                      // invasive
	EbolaRdtAza                 sql.NullInt64   `json:"ebola_rdt_aza"`                 // ebola_rdt_aza
	EbolaExperimentalIfZmap     sql.NullInt64   `json:"ebola_experimental_if_zmap"`    // ebola_experimental_if_zmap
	EbolaExperimentalIfRemd     sql.NullInt64   `json:"ebola_experimental_if_remd"`    // ebola_experimental_if_remd
	EbolaExperimentalIfRegn     sql.NullInt64   `json:"ebola_experimental_if_regn"`    // ebola_experimental_if_regn
	EbolaExperimentalIfFavi     sql.NullInt64   `json:"ebola_experimental_if_favi"`    // ebola_experimental_if_favi
	EbolaExperimentalIfMab      sql.NullInt64   `json:"ebola_experimental_if_mab"`     // ebola_experimental_if_mab
	OralOtherAza                sql.NullString  `json:"oral_other_aza"`                // oral_other_aza
	AntibacterialAza            sql.NullInt64   `json:"antibacterial_aza"`             // antibacterial_aza
	AntimalarialArtesunateDose  sql.NullString  `json:"antimalarial_artesunate_dose"`  // antimalarial_artesunate_dose
	AntimalarialArtesunateRoute sql.NullString  `json:"antimalarial_artesunate_route"` // antimalarial_artesunate_route
	AntimalarialArtesunateFreq  sql.NullString  `json:"antimalarial_artesunate_freq"`  // antimalarial_artesunate_freq
	AntimalarialArthemeterDose  sql.NullString  `json:"antimalarial_arthemeter_dose"`  // antimalarial_arthemeter_dose
	AntimalarialArthemeterRoute sql.NullString  `json:"antimalarial_arthemeter_route"` // antimalarial_arthemeter_route
	AntimalarialArthemeterFreq  sql.NullString  `json:"antimalarial_arthemeter_freq"`  // antimalarial_arthemeter_freq
	AntimalarialAlDose          sql.NullString  `json:"antimalarial_al_dose"`          // antimalarial_al_dose
	AntimalarialAlRoute         sql.NullString  `json:"antimalarial_al_route"`         // antimalarial_al_route
	AntimalarialAlFreq          sql.NullString  `json:"antimalarial_al_freq"`          // antimalarial_al_freq
	AntimalarialAaDose          sql.NullString  `json:"antimalarial_aa_dose"`          // antimalarial_aa_dose
	AntimalarialAaRoute         sql.NullString  `json:"antimalarial_aa_route"`         // antimalarial_aa_route
	AntimalarialAaFreq          sql.NullString  `json:"antimalarial_aa_freq"`          // antimalarial_aa_freq
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Treatment] exists in the database.
func (t *Treatment) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Treatment] has been marked for deletion
// from the database.
func (t *Treatment) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Treatment] to the database.
func (t *Treatment) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.treatment (` +
		`encounter_id, antibacterial, amoxicillin, ceftriaxone, cefixime, antibacterial_other, antibacterial_dose, antibacterial_route, antibacterial_freq, antimalarial, antimalarial_artesunate, antimalarial_arthemeter, antimalarial_al, antimalarial_aa, antimalarial_dose, antimalarial_route, antimalarial_freq, other_meds_specify, other_meds_dose, other_meds_route, other_meds_freq, ebola_experimental, ebola_experimental_if, oral, oral_ors, oral_ors_qty, oral_water, oral_water_qty, oral_other, oral_other_qty, iv, iv_qty, iv_using, iv_aza, access_type, blood_trans, oxygen_therapy, oxygen_qty, oxygen_with, vasopressors, renal, invasive, ebola_rdt_aza, ebola_experimental_if_zmap, ebola_experimental_if_remd, ebola_experimental_if_regn, ebola_experimental_if_favi, ebola_experimental_if_mab, oral_other_aza, antibacterial_aza, antimalarial_artesunate_dose, antimalarial_artesunate_route, antimalarial_artesunate_freq, antimalarial_arthemeter_dose, antimalarial_arthemeter_route, antimalarial_arthemeter_freq, antimalarial_al_dose, antimalarial_al_route, antimalarial_al_freq, antimalarial_aa_dose, antimalarial_aa_route, antimalarial_aa_freq` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62` +
		`) RETURNING treatment_id`
	// run
	logf(sqlstr, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq)
	if err := db.QueryRowContext(ctx, sqlstr, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq).Scan(&t.TreatmentID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Treatment] in the database.
func (t *Treatment) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.treatment SET ` +
		`encounter_id = $1, antibacterial = $2, amoxicillin = $3, ceftriaxone = $4, cefixime = $5, antibacterial_other = $6, antibacterial_dose = $7, antibacterial_route = $8, antibacterial_freq = $9, antimalarial = $10, antimalarial_artesunate = $11, antimalarial_arthemeter = $12, antimalarial_al = $13, antimalarial_aa = $14, antimalarial_dose = $15, antimalarial_route = $16, antimalarial_freq = $17, other_meds_specify = $18, other_meds_dose = $19, other_meds_route = $20, other_meds_freq = $21, ebola_experimental = $22, ebola_experimental_if = $23, oral = $24, oral_ors = $25, oral_ors_qty = $26, oral_water = $27, oral_water_qty = $28, oral_other = $29, oral_other_qty = $30, iv = $31, iv_qty = $32, iv_using = $33, iv_aza = $34, access_type = $35, blood_trans = $36, oxygen_therapy = $37, oxygen_qty = $38, oxygen_with = $39, vasopressors = $40, renal = $41, invasive = $42, ebola_rdt_aza = $43, ebola_experimental_if_zmap = $44, ebola_experimental_if_remd = $45, ebola_experimental_if_regn = $46, ebola_experimental_if_favi = $47, ebola_experimental_if_mab = $48, oral_other_aza = $49, antibacterial_aza = $50, antimalarial_artesunate_dose = $51, antimalarial_artesunate_route = $52, antimalarial_artesunate_freq = $53, antimalarial_arthemeter_dose = $54, antimalarial_arthemeter_route = $55, antimalarial_arthemeter_freq = $56, antimalarial_al_dose = $57, antimalarial_al_route = $58, antimalarial_al_freq = $59, antimalarial_aa_dose = $60, antimalarial_aa_route = $61, antimalarial_aa_freq = $62 ` +
		`WHERE treatment_id = $63`
	// run
	logf(sqlstr, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq, t.TreatmentID)
	if _, err := db.ExecContext(ctx, sqlstr, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq, t.TreatmentID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Treatment] to the database.
func (t *Treatment) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Treatment].
func (t *Treatment) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.treatment (` +
		`treatment_id, encounter_id, antibacterial, amoxicillin, ceftriaxone, cefixime, antibacterial_other, antibacterial_dose, antibacterial_route, antibacterial_freq, antimalarial, antimalarial_artesunate, antimalarial_arthemeter, antimalarial_al, antimalarial_aa, antimalarial_dose, antimalarial_route, antimalarial_freq, other_meds_specify, other_meds_dose, other_meds_route, other_meds_freq, ebola_experimental, ebola_experimental_if, oral, oral_ors, oral_ors_qty, oral_water, oral_water_qty, oral_other, oral_other_qty, iv, iv_qty, iv_using, iv_aza, access_type, blood_trans, oxygen_therapy, oxygen_qty, oxygen_with, vasopressors, renal, invasive, ebola_rdt_aza, ebola_experimental_if_zmap, ebola_experimental_if_remd, ebola_experimental_if_regn, ebola_experimental_if_favi, ebola_experimental_if_mab, oral_other_aza, antibacterial_aza, antimalarial_artesunate_dose, antimalarial_artesunate_route, antimalarial_artesunate_freq, antimalarial_arthemeter_dose, antimalarial_arthemeter_route, antimalarial_arthemeter_freq, antimalarial_al_dose, antimalarial_al_route, antimalarial_al_freq, antimalarial_aa_dose, antimalarial_aa_route, antimalarial_aa_freq` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63` +
		`)` +
		` ON CONFLICT (treatment_id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, antibacterial = EXCLUDED.antibacterial, amoxicillin = EXCLUDED.amoxicillin, ceftriaxone = EXCLUDED.ceftriaxone, cefixime = EXCLUDED.cefixime, antibacterial_other = EXCLUDED.antibacterial_other, antibacterial_dose = EXCLUDED.antibacterial_dose, antibacterial_route = EXCLUDED.antibacterial_route, antibacterial_freq = EXCLUDED.antibacterial_freq, antimalarial = EXCLUDED.antimalarial, antimalarial_artesunate = EXCLUDED.antimalarial_artesunate, antimalarial_arthemeter = EXCLUDED.antimalarial_arthemeter, antimalarial_al = EXCLUDED.antimalarial_al, antimalarial_aa = EXCLUDED.antimalarial_aa, antimalarial_dose = EXCLUDED.antimalarial_dose, antimalarial_route = EXCLUDED.antimalarial_route, antimalarial_freq = EXCLUDED.antimalarial_freq, other_meds_specify = EXCLUDED.other_meds_specify, other_meds_dose = EXCLUDED.other_meds_dose, other_meds_route = EXCLUDED.other_meds_route, other_meds_freq = EXCLUDED.other_meds_freq, ebola_experimental = EXCLUDED.ebola_experimental, ebola_experimental_if = EXCLUDED.ebola_experimental_if, oral = EXCLUDED.oral, oral_ors = EXCLUDED.oral_ors, oral_ors_qty = EXCLUDED.oral_ors_qty, oral_water = EXCLUDED.oral_water, oral_water_qty = EXCLUDED.oral_water_qty, oral_other = EXCLUDED.oral_other, oral_other_qty = EXCLUDED.oral_other_qty, iv = EXCLUDED.iv, iv_qty = EXCLUDED.iv_qty, iv_using = EXCLUDED.iv_using, iv_aza = EXCLUDED.iv_aza, access_type = EXCLUDED.access_type, blood_trans = EXCLUDED.blood_trans, oxygen_therapy = EXCLUDED.oxygen_therapy, oxygen_qty = EXCLUDED.oxygen_qty, oxygen_with = EXCLUDED.oxygen_with, vasopressors = EXCLUDED.vasopressors, renal = EXCLUDED.renal, invasive = EXCLUDED.invasive, ebola_rdt_aza = EXCLUDED.ebola_rdt_aza, ebola_experimental_if_zmap = EXCLUDED.ebola_experimental_if_zmap, ebola_experimental_if_remd = EXCLUDED.ebola_experimental_if_remd, ebola_experimental_if_regn = EXCLUDED.ebola_experimental_if_regn, ebola_experimental_if_favi = EXCLUDED.ebola_experimental_if_favi, ebola_experimental_if_mab = EXCLUDED.ebola_experimental_if_mab, oral_other_aza = EXCLUDED.oral_other_aza, antibacterial_aza = EXCLUDED.antibacterial_aza, antimalarial_artesunate_dose = EXCLUDED.antimalarial_artesunate_dose, antimalarial_artesunate_route = EXCLUDED.antimalarial_artesunate_route, antimalarial_artesunate_freq = EXCLUDED.antimalarial_artesunate_freq, antimalarial_arthemeter_dose = EXCLUDED.antimalarial_arthemeter_dose, antimalarial_arthemeter_route = EXCLUDED.antimalarial_arthemeter_route, antimalarial_arthemeter_freq = EXCLUDED.antimalarial_arthemeter_freq, antimalarial_al_dose = EXCLUDED.antimalarial_al_dose, antimalarial_al_route = EXCLUDED.antimalarial_al_route, antimalarial_al_freq = EXCLUDED.antimalarial_al_freq, antimalarial_aa_dose = EXCLUDED.antimalarial_aa_dose, antimalarial_aa_route = EXCLUDED.antimalarial_aa_route, antimalarial_aa_freq = EXCLUDED.antimalarial_aa_freq `
	// run
	logf(sqlstr, t.TreatmentID, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq)
	if _, err := db.ExecContext(ctx, sqlstr, t.TreatmentID, t.EncounterID, t.Antibacterial, t.Amoxicillin, t.Ceftriaxone, t.Cefixime, t.AntibacterialOther, t.AntibacterialDose, t.AntibacterialRoute, t.AntibacterialFreq, t.Antimalarial, t.AntimalarialArtesunate, t.AntimalarialArthemeter, t.AntimalarialAl, t.AntimalarialAa, t.AntimalarialDose, t.AntimalarialRoute, t.AntimalarialFreq, t.OtherMedsSpecify, t.OtherMedsDose, t.OtherMedsRoute, t.OtherMedsFreq, t.EbolaExperimental, t.EbolaExperimentalIf, t.Oral, t.OralOrs, t.OralOrsQty, t.OralWater, t.OralWaterQty, t.OralOther, t.OralOtherQty, t.Iv, t.IvQty, t.IvUsing, t.IvAza, t.AccessType, t.BloodTrans, t.OxygenTherapy, t.OxygenQty, t.OxygenWith, t.Vasopressors, t.Renal, t.Invasive, t.EbolaRdtAza, t.EbolaExperimentalIfZmap, t.EbolaExperimentalIfRemd, t.EbolaExperimentalIfRegn, t.EbolaExperimentalIfFavi, t.EbolaExperimentalIfMab, t.OralOtherAza, t.AntibacterialAza, t.AntimalarialArtesunateDose, t.AntimalarialArtesunateRoute, t.AntimalarialArtesunateFreq, t.AntimalarialArthemeterDose, t.AntimalarialArthemeterRoute, t.AntimalarialArthemeterFreq, t.AntimalarialAlDose, t.AntimalarialAlRoute, t.AntimalarialAlFreq, t.AntimalarialAaDose, t.AntimalarialAaRoute, t.AntimalarialAaFreq); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Treatment] from the database.
func (t *Treatment) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.treatment ` +
		`WHERE treatment_id = $1`
	// run
	logf(sqlstr, t.TreatmentID)
	if _, err := db.ExecContext(ctx, sqlstr, t.TreatmentID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TreatmentByTreatmentID retrieves a row from 'public.treatment' as a [Treatment].
//
// Generated from index 'treatment_pkey'.
func TreatmentByTreatmentID(ctx context.Context, db DB, treatmentID int) (*Treatment, error) {
	// query
	const sqlstr = `SELECT ` +
		`treatment_id, encounter_id, antibacterial, amoxicillin, ceftriaxone, cefixime, antibacterial_other, antibacterial_dose, antibacterial_route, antibacterial_freq, antimalarial, antimalarial_artesunate, antimalarial_arthemeter, antimalarial_al, antimalarial_aa, antimalarial_dose, antimalarial_route, antimalarial_freq, other_meds_specify, other_meds_dose, other_meds_route, other_meds_freq, ebola_experimental, ebola_experimental_if, oral, oral_ors, oral_ors_qty, oral_water, oral_water_qty, oral_other, oral_other_qty, iv, iv_qty, iv_using, iv_aza, access_type, blood_trans, oxygen_therapy, oxygen_qty, oxygen_with, vasopressors, renal, invasive, ebola_rdt_aza, ebola_experimental_if_zmap, ebola_experimental_if_remd, ebola_experimental_if_regn, ebola_experimental_if_favi, ebola_experimental_if_mab, oral_other_aza, antibacterial_aza, antimalarial_artesunate_dose, antimalarial_artesunate_route, antimalarial_artesunate_freq, antimalarial_arthemeter_dose, antimalarial_arthemeter_route, antimalarial_arthemeter_freq, antimalarial_al_dose, antimalarial_al_route, antimalarial_al_freq, antimalarial_aa_dose, antimalarial_aa_route, antimalarial_aa_freq ` +
		`FROM public.treatment ` +
		`WHERE treatment_id = $1`
	// run
	logf(sqlstr, treatmentID)
	t := Treatment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, treatmentID).Scan(&t.TreatmentID, &t.EncounterID, &t.Antibacterial, &t.Amoxicillin, &t.Ceftriaxone, &t.Cefixime, &t.AntibacterialOther, &t.AntibacterialDose, &t.AntibacterialRoute, &t.AntibacterialFreq, &t.Antimalarial, &t.AntimalarialArtesunate, &t.AntimalarialArthemeter, &t.AntimalarialAl, &t.AntimalarialAa, &t.AntimalarialDose, &t.AntimalarialRoute, &t.AntimalarialFreq, &t.OtherMedsSpecify, &t.OtherMedsDose, &t.OtherMedsRoute, &t.OtherMedsFreq, &t.EbolaExperimental, &t.EbolaExperimentalIf, &t.Oral, &t.OralOrs, &t.OralOrsQty, &t.OralWater, &t.OralWaterQty, &t.OralOther, &t.OralOtherQty, &t.Iv, &t.IvQty, &t.IvUsing, &t.IvAza, &t.AccessType, &t.BloodTrans, &t.OxygenTherapy, &t.OxygenQty, &t.OxygenWith, &t.Vasopressors, &t.Renal, &t.Invasive, &t.EbolaRdtAza, &t.EbolaExperimentalIfZmap, &t.EbolaExperimentalIfRemd, &t.EbolaExperimentalIfRegn, &t.EbolaExperimentalIfFavi, &t.EbolaExperimentalIfMab, &t.OralOtherAza, &t.AntibacterialAza, &t.AntimalarialArtesunateDose, &t.AntimalarialArtesunateRoute, &t.AntimalarialArtesunateFreq, &t.AntimalarialArthemeterDose, &t.AntimalarialArthemeterRoute, &t.AntimalarialArthemeterFreq, &t.AntimalarialAlDose, &t.AntimalarialAlRoute, &t.AntimalarialAlFreq, &t.AntimalarialAaDose, &t.AntimalarialAaRoute, &t.AntimalarialAaFreq); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
