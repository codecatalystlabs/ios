package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Lab represents a row from 'public.lab'.
type Lab struct {
	LabID                 int             `json:"lab_id"`                  // lab_id
	EncounterID           sql.NullInt64   `json:"encounter_id"`            // encounter_id
	Specimen              sql.NullInt64   `json:"specimen"`                // specimen
	SampleBlood           sql.NullInt64   `json:"sample_blood"`            // sample_blood
	SampleUrine           sql.NullInt64   `json:"sample_urine"`            // sample_urine
	SampleSwab            sql.NullInt64   `json:"sample_swab"`             // sample_swab
	SampleAza             sql.NullString  `json:"sample_aza"`              // sample_aza
	EbolaRdt              sql.NullInt64   `json:"ebola_rdt"`               // ebola_rdt
	EbolaRdtDate          sql.NullString  `json:"ebola_rdt_date"`          // ebola_rdt_date
	EbolaRdtResults       sql.NullInt64   `json:"ebola_rdt_results"`       // ebola_rdt_results
	EbolaPcr              sql.NullInt64   `json:"ebola_pcr"`               // ebola_pcr
	EbolaPcrAza           sql.NullString  `json:"ebola_pcr_aza"`           // ebola_pcr_aza
	EbolaPcrDate          sql.NullString  `json:"ebola_pcr_date"`          // ebola_pcr_date
	EbolaPcrGp            sql.NullInt64   `json:"ebola_pcr_gp"`            // ebola_pcr_gp
	EbolaPcrGpCt          sql.NullFloat64 `json:"ebola_pcr_gp_ct"`         // ebola_pcr_gp_ct
	EbolaPcrNp            sql.NullInt64   `json:"ebola_pcr_np"`            // ebola_pcr_np
	EbolaPcrNpCt          sql.NullFloat64 `json:"ebola_pcr_np_ct"`         // ebola_pcr_np_ct
	EbolaPcrIndeterminate sql.NullInt64   `json:"ebola_pcr_indeterminate"` // ebola_pcr_indeterminate
	MalariaRdtDate        sql.NullString  `json:"malaria_rdt_date"`        // malaria_rdt_date
	MalariaRdtResult      sql.NullInt64   `json:"malaria_rdt_result"`      // malaria_rdt_result
	BloodCultureDate      sql.NullString  `json:"blood_culture_date"`      // blood_culture_date
	BloodCultureResult    sql.NullInt64   `json:"blood_culture_result"`    // blood_culture_result
	TestPosInfection      sql.NullInt64   `json:"test_pos_infection"`      // test_pos_infection
	TestPosInfectionAza   sql.NullString  `json:"test_pos_infection_aza"`  // test_pos_infection_aza
	Haemoglobinuria       sql.NullInt64   `json:"haemoglobinuria"`         // haemoglobinuria
	Proteinuria           sql.NullInt64   `json:"proteinuria"`             // proteinuria
	Hematuria             sql.NullInt64   `json:"hematuria"`               // hematuria
	BloodGas              sql.NullInt64   `json:"blood_gas"`               // blood_gas
	Ph                    sql.NullFloat64 `json:"ph"`                      // ph
	Pco2                  sql.NullFloat64 `json:"pco2"`                    // pco2
	Pao2                  sql.NullFloat64 `json:"pao2"`                    // pao2
	Hco3                  sql.NullFloat64 `json:"hco3"`                    // hco3
	OxygenTherapy         sql.NullFloat64 `json:"oxygen_therapy"`          // oxygen_therapy
	AltSgpt               sql.NullFloat64 `json:"alt_sgpt"`                // alt_sgpt
	AstSgo                sql.NullFloat64 `json:"ast_sgo"`                 // ast_sgo
	Creatinine            sql.NullFloat64 `json:"creatinine"`              // creatinine
	Potassium             sql.NullFloat64 `json:"potassium"`               // potassium
	Urea                  sql.NullFloat64 `json:"urea"`                    // urea
	CreatinineKinase      sql.NullFloat64 `json:"creatinine_kinase"`       // creatinine_kinase
	Calcium               sql.NullFloat64 `json:"calcium"`                 // calcium
	Sodium                sql.NullFloat64 `json:"sodium"`                  // sodium
	AltSgptNd             sql.NullInt64   `json:"alt_sgpt_nd"`             // alt_sgpt_nd
	AstSgoNd              sql.NullInt64   `json:"ast_sgo_nd"`              // ast_sgo_nd
	CreatinineNd          sql.NullInt64   `json:"creatinine_nd"`           // creatinine_nd
	PotassiumNd           sql.NullInt64   `json:"potassium_nd"`            // potassium_nd
	UreaNd                sql.NullInt64   `json:"urea_nd"`                 // urea_nd
	CreatinineKinaseNd    sql.NullInt64   `json:"creatinine_kinase_nd"`    // creatinine_kinase_nd
	CalciumNd             sql.NullInt64   `json:"calcium_nd"`              // calcium_nd
	SodiumNd              sql.NullInt64   `json:"sodium_nd"`               // sodium_nd
	Glucose               sql.NullFloat64 `json:"glucose"`                 // glucose
	Lactate               sql.NullFloat64 `json:"lactate"`                 // lactate
	Haemoglobin           sql.NullFloat64 `json:"haemoglobin"`             // haemoglobin
	TotalBilirubin        sql.NullFloat64 `json:"total_bilirubin"`         // total_bilirubin
	WbcCount              sql.NullFloat64 `json:"wbc_count"`               // wbc_count
	Platelets             sql.NullFloat64 `json:"platelets"`               // platelets
	Pt                    sql.NullFloat64 `json:"pt"`                      // pt
	Aptt                  sql.NullFloat64 `json:"aptt"`                    // aptt
	GlucoseNd             sql.NullInt64   `json:"glucose_nd"`              // glucose_nd
	LactateNd             sql.NullInt64   `json:"lactate_nd"`              // lactate_nd
	HaemoglobinNd         sql.NullInt64   `json:"haemoglobin_nd"`          // haemoglobin_nd
	TotalBilirubinNd      sql.NullInt64   `json:"total_bilirubin_nd"`      // total_bilirubin_nd
	WbcCountNd            sql.NullInt64   `json:"wbc_count_nd"`            // wbc_count_nd
	PlateletsNd           sql.NullInt64   `json:"platelets_nd"`            // platelets_nd
	PtNd                  sql.NullInt64   `json:"pt_nd"`                   // pt_nd
	ApttNd                sql.NullInt64   `json:"aptt_nd"`                 // aptt_nd
	EbolaRdtAza           sql.NullString  `json:"ebola_rdt_aza"`           // ebola_rdt_aza
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Lab] exists in the database.
func (l *Lab) Exists() bool {
	return l._exists
}

// Deleted returns true when the [Lab] has been marked for deletion
// from the database.
func (l *Lab) Deleted() bool {
	return l._deleted
}

// Insert inserts the [Lab] to the database.
func (l *Lab) Insert(ctx context.Context, db DB) error {
	switch {
	case l._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case l._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.lab (` +
		`encounter_id, specimen, sample_blood, sample_urine, sample_swab, sample_aza, ebola_rdt, ebola_rdt_date, ebola_rdt_results, ebola_pcr, ebola_pcr_aza, ebola_pcr_date, ebola_pcr_gp, ebola_pcr_gp_ct, ebola_pcr_np, ebola_pcr_np_ct, ebola_pcr_indeterminate, malaria_rdt_date, malaria_rdt_result, blood_culture_date, blood_culture_result, test_pos_infection, test_pos_infection_aza, haemoglobinuria, proteinuria, hematuria, blood_gas, ph, pco2, pao2, hco3, oxygen_therapy, alt_sgpt, ast_sgo, creatinine, potassium, urea, creatinine_kinase, calcium, sodium, alt_sgpt_nd, ast_sgo_nd, creatinine_nd, potassium_nd, urea_nd, creatinine_kinase_nd, calcium_nd, sodium_nd, glucose, lactate, haemoglobin, total_bilirubin, wbc_count, platelets, pt, aptt, glucose_nd, lactate_nd, haemoglobin_nd, total_bilirubin_nd, wbc_count_nd, platelets_nd, pt_nd, aptt_nd, ebola_rdt_aza` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65` +
		`) RETURNING lab_id`
	// run
	logf(sqlstr, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza)
	if err := db.QueryRowContext(ctx, sqlstr, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza).Scan(&l.LabID); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Update updates a [Lab] in the database.
func (l *Lab) Update(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case l._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.lab SET ` +
		`encounter_id = $1, specimen = $2, sample_blood = $3, sample_urine = $4, sample_swab = $5, sample_aza = $6, ebola_rdt = $7, ebola_rdt_date = $8, ebola_rdt_results = $9, ebola_pcr = $10, ebola_pcr_aza = $11, ebola_pcr_date = $12, ebola_pcr_gp = $13, ebola_pcr_gp_ct = $14, ebola_pcr_np = $15, ebola_pcr_np_ct = $16, ebola_pcr_indeterminate = $17, malaria_rdt_date = $18, malaria_rdt_result = $19, blood_culture_date = $20, blood_culture_result = $21, test_pos_infection = $22, test_pos_infection_aza = $23, haemoglobinuria = $24, proteinuria = $25, hematuria = $26, blood_gas = $27, ph = $28, pco2 = $29, pao2 = $30, hco3 = $31, oxygen_therapy = $32, alt_sgpt = $33, ast_sgo = $34, creatinine = $35, potassium = $36, urea = $37, creatinine_kinase = $38, calcium = $39, sodium = $40, alt_sgpt_nd = $41, ast_sgo_nd = $42, creatinine_nd = $43, potassium_nd = $44, urea_nd = $45, creatinine_kinase_nd = $46, calcium_nd = $47, sodium_nd = $48, glucose = $49, lactate = $50, haemoglobin = $51, total_bilirubin = $52, wbc_count = $53, platelets = $54, pt = $55, aptt = $56, glucose_nd = $57, lactate_nd = $58, haemoglobin_nd = $59, total_bilirubin_nd = $60, wbc_count_nd = $61, platelets_nd = $62, pt_nd = $63, aptt_nd = $64, ebola_rdt_aza = $65 ` +
		`WHERE lab_id = $66`
	// run
	logf(sqlstr, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza, l.LabID)
	if _, err := db.ExecContext(ctx, sqlstr, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza, l.LabID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Lab] to the database.
func (l *Lab) Save(ctx context.Context, db DB) error {
	if l.Exists() {
		return l.Update(ctx, db)
	}
	return l.Insert(ctx, db)
}

// Upsert performs an upsert for [Lab].
func (l *Lab) Upsert(ctx context.Context, db DB) error {
	switch {
	case l._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.lab (` +
		`lab_id, encounter_id, specimen, sample_blood, sample_urine, sample_swab, sample_aza, ebola_rdt, ebola_rdt_date, ebola_rdt_results, ebola_pcr, ebola_pcr_aza, ebola_pcr_date, ebola_pcr_gp, ebola_pcr_gp_ct, ebola_pcr_np, ebola_pcr_np_ct, ebola_pcr_indeterminate, malaria_rdt_date, malaria_rdt_result, blood_culture_date, blood_culture_result, test_pos_infection, test_pos_infection_aza, haemoglobinuria, proteinuria, hematuria, blood_gas, ph, pco2, pao2, hco3, oxygen_therapy, alt_sgpt, ast_sgo, creatinine, potassium, urea, creatinine_kinase, calcium, sodium, alt_sgpt_nd, ast_sgo_nd, creatinine_nd, potassium_nd, urea_nd, creatinine_kinase_nd, calcium_nd, sodium_nd, glucose, lactate, haemoglobin, total_bilirubin, wbc_count, platelets, pt, aptt, glucose_nd, lactate_nd, haemoglobin_nd, total_bilirubin_nd, wbc_count_nd, platelets_nd, pt_nd, aptt_nd, ebola_rdt_aza` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66` +
		`)` +
		` ON CONFLICT (lab_id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, specimen = EXCLUDED.specimen, sample_blood = EXCLUDED.sample_blood, sample_urine = EXCLUDED.sample_urine, sample_swab = EXCLUDED.sample_swab, sample_aza = EXCLUDED.sample_aza, ebola_rdt = EXCLUDED.ebola_rdt, ebola_rdt_date = EXCLUDED.ebola_rdt_date, ebola_rdt_results = EXCLUDED.ebola_rdt_results, ebola_pcr = EXCLUDED.ebola_pcr, ebola_pcr_aza = EXCLUDED.ebola_pcr_aza, ebola_pcr_date = EXCLUDED.ebola_pcr_date, ebola_pcr_gp = EXCLUDED.ebola_pcr_gp, ebola_pcr_gp_ct = EXCLUDED.ebola_pcr_gp_ct, ebola_pcr_np = EXCLUDED.ebola_pcr_np, ebola_pcr_np_ct = EXCLUDED.ebola_pcr_np_ct, ebola_pcr_indeterminate = EXCLUDED.ebola_pcr_indeterminate, malaria_rdt_date = EXCLUDED.malaria_rdt_date, malaria_rdt_result = EXCLUDED.malaria_rdt_result, blood_culture_date = EXCLUDED.blood_culture_date, blood_culture_result = EXCLUDED.blood_culture_result, test_pos_infection = EXCLUDED.test_pos_infection, test_pos_infection_aza = EXCLUDED.test_pos_infection_aza, haemoglobinuria = EXCLUDED.haemoglobinuria, proteinuria = EXCLUDED.proteinuria, hematuria = EXCLUDED.hematuria, blood_gas = EXCLUDED.blood_gas, ph = EXCLUDED.ph, pco2 = EXCLUDED.pco2, pao2 = EXCLUDED.pao2, hco3 = EXCLUDED.hco3, oxygen_therapy = EXCLUDED.oxygen_therapy, alt_sgpt = EXCLUDED.alt_sgpt, ast_sgo = EXCLUDED.ast_sgo, creatinine = EXCLUDED.creatinine, potassium = EXCLUDED.potassium, urea = EXCLUDED.urea, creatinine_kinase = EXCLUDED.creatinine_kinase, calcium = EXCLUDED.calcium, sodium = EXCLUDED.sodium, alt_sgpt_nd = EXCLUDED.alt_sgpt_nd, ast_sgo_nd = EXCLUDED.ast_sgo_nd, creatinine_nd = EXCLUDED.creatinine_nd, potassium_nd = EXCLUDED.potassium_nd, urea_nd = EXCLUDED.urea_nd, creatinine_kinase_nd = EXCLUDED.creatinine_kinase_nd, calcium_nd = EXCLUDED.calcium_nd, sodium_nd = EXCLUDED.sodium_nd, glucose = EXCLUDED.glucose, lactate = EXCLUDED.lactate, haemoglobin = EXCLUDED.haemoglobin, total_bilirubin = EXCLUDED.total_bilirubin, wbc_count = EXCLUDED.wbc_count, platelets = EXCLUDED.platelets, pt = EXCLUDED.pt, aptt = EXCLUDED.aptt, glucose_nd = EXCLUDED.glucose_nd, lactate_nd = EXCLUDED.lactate_nd, haemoglobin_nd = EXCLUDED.haemoglobin_nd, total_bilirubin_nd = EXCLUDED.total_bilirubin_nd, wbc_count_nd = EXCLUDED.wbc_count_nd, platelets_nd = EXCLUDED.platelets_nd, pt_nd = EXCLUDED.pt_nd, aptt_nd = EXCLUDED.aptt_nd, ebola_rdt_aza = EXCLUDED.ebola_rdt_aza `
	// run
	logf(sqlstr, l.LabID, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza)
	if _, err := db.ExecContext(ctx, sqlstr, l.LabID, l.EncounterID, l.Specimen, l.SampleBlood, l.SampleUrine, l.SampleSwab, l.SampleAza, l.EbolaRdt, l.EbolaRdtDate, l.EbolaRdtResults, l.EbolaPcr, l.EbolaPcrAza, l.EbolaPcrDate, l.EbolaPcrGp, l.EbolaPcrGpCt, l.EbolaPcrNp, l.EbolaPcrNpCt, l.EbolaPcrIndeterminate, l.MalariaRdtDate, l.MalariaRdtResult, l.BloodCultureDate, l.BloodCultureResult, l.TestPosInfection, l.TestPosInfectionAza, l.Haemoglobinuria, l.Proteinuria, l.Hematuria, l.BloodGas, l.Ph, l.Pco2, l.Pao2, l.Hco3, l.OxygenTherapy, l.AltSgpt, l.AstSgo, l.Creatinine, l.Potassium, l.Urea, l.CreatinineKinase, l.Calcium, l.Sodium, l.AltSgptNd, l.AstSgoNd, l.CreatinineNd, l.PotassiumNd, l.UreaNd, l.CreatinineKinaseNd, l.CalciumNd, l.SodiumNd, l.Glucose, l.Lactate, l.Haemoglobin, l.TotalBilirubin, l.WbcCount, l.Platelets, l.Pt, l.Aptt, l.GlucoseNd, l.LactateNd, l.HaemoglobinNd, l.TotalBilirubinNd, l.WbcCountNd, l.PlateletsNd, l.PtNd, l.ApttNd, l.EbolaRdtAza); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Delete deletes the [Lab] from the database.
func (l *Lab) Delete(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return nil
	case l._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.lab ` +
		`WHERE lab_id = $1`
	// run
	logf(sqlstr, l.LabID)
	if _, err := db.ExecContext(ctx, sqlstr, l.LabID); err != nil {
		return logerror(err)
	}
	// set deleted
	l._deleted = true
	return nil
}

// LabByLabID retrieves a row from 'public.lab' as a [Lab].
//
// Generated from index 'lab_pkey1'.
func LabByLabID(ctx context.Context, db DB, labID int) (*Lab, error) {
	// query
	const sqlstr = `SELECT ` +
		`lab_id, encounter_id, specimen, sample_blood, sample_urine, sample_swab, sample_aza, ebola_rdt, ebola_rdt_date, ebola_rdt_results, ebola_pcr, ebola_pcr_aza, ebola_pcr_date, ebola_pcr_gp, ebola_pcr_gp_ct, ebola_pcr_np, ebola_pcr_np_ct, ebola_pcr_indeterminate, malaria_rdt_date, malaria_rdt_result, blood_culture_date, blood_culture_result, test_pos_infection, test_pos_infection_aza, haemoglobinuria, proteinuria, hematuria, blood_gas, ph, pco2, pao2, hco3, oxygen_therapy, alt_sgpt, ast_sgo, creatinine, potassium, urea, creatinine_kinase, calcium, sodium, alt_sgpt_nd, ast_sgo_nd, creatinine_nd, potassium_nd, urea_nd, creatinine_kinase_nd, calcium_nd, sodium_nd, glucose, lactate, haemoglobin, total_bilirubin, wbc_count, platelets, pt, aptt, glucose_nd, lactate_nd, haemoglobin_nd, total_bilirubin_nd, wbc_count_nd, platelets_nd, pt_nd, aptt_nd, ebola_rdt_aza ` +
		`FROM public.lab ` +
		`WHERE lab_id = $1`
	// run
	logf(sqlstr, labID)
	l := Lab{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, labID).Scan(&l.LabID, &l.EncounterID, &l.Specimen, &l.SampleBlood, &l.SampleUrine, &l.SampleSwab, &l.SampleAza, &l.EbolaRdt, &l.EbolaRdtDate, &l.EbolaRdtResults, &l.EbolaPcr, &l.EbolaPcrAza, &l.EbolaPcrDate, &l.EbolaPcrGp, &l.EbolaPcrGpCt, &l.EbolaPcrNp, &l.EbolaPcrNpCt, &l.EbolaPcrIndeterminate, &l.MalariaRdtDate, &l.MalariaRdtResult, &l.BloodCultureDate, &l.BloodCultureResult, &l.TestPosInfection, &l.TestPosInfectionAza, &l.Haemoglobinuria, &l.Proteinuria, &l.Hematuria, &l.BloodGas, &l.Ph, &l.Pco2, &l.Pao2, &l.Hco3, &l.OxygenTherapy, &l.AltSgpt, &l.AstSgo, &l.Creatinine, &l.Potassium, &l.Urea, &l.CreatinineKinase, &l.Calcium, &l.Sodium, &l.AltSgptNd, &l.AstSgoNd, &l.CreatinineNd, &l.PotassiumNd, &l.UreaNd, &l.CreatinineKinaseNd, &l.CalciumNd, &l.SodiumNd, &l.Glucose, &l.Lactate, &l.Haemoglobin, &l.TotalBilirubin, &l.WbcCount, &l.Platelets, &l.Pt, &l.Aptt, &l.GlucoseNd, &l.LactateNd, &l.HaemoglobinNd, &l.TotalBilirubinNd, &l.WbcCountNd, &l.PlateletsNd, &l.PtNd, &l.ApttNd, &l.EbolaRdtAza); err != nil {
		return nil, logerror(err)
	}
	return &l, nil
}
