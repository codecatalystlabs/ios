package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Metum represents a row from 'public.meta'.
type Metum struct {
	MetaID          int            `json:"meta_id"`          // meta_id
	MetaCategory    sql.NullInt64  `json:"meta_category"`    // meta_category
	MetaName        sql.NullString `json:"meta_name"`        // meta_name
	MetaOrder       sql.NullInt64  `json:"meta_order"`       // meta_order
	MetaDescription sql.NullString `json:"meta_description"` // meta_description
	MetaLink        sql.NullString `json:"meta_link"`        // meta_link
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Metum] exists in the database.
func (m *Metum) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Metum] has been marked for deletion
// from the database.
func (m *Metum) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Metum] to the database.
func (m *Metum) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.meta (` +
		`meta_category, meta_name, meta_order, meta_description, meta_link` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING meta_id`
	// run
	logf(sqlstr, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink)
	if err := db.QueryRowContext(ctx, sqlstr, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink).Scan(&m.MetaID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Metum] in the database.
func (m *Metum) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.meta SET ` +
		`meta_category = $1, meta_name = $2, meta_order = $3, meta_description = $4, meta_link = $5 ` +
		`WHERE meta_id = $6`
	// run
	logf(sqlstr, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink, m.MetaID)
	if _, err := db.ExecContext(ctx, sqlstr, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink, m.MetaID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Metum] to the database.
func (m *Metum) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Metum].
func (m *Metum) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.meta (` +
		`meta_id, meta_category, meta_name, meta_order, meta_description, meta_link` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (meta_id) DO ` +
		`UPDATE SET ` +
		`meta_category = EXCLUDED.meta_category, meta_name = EXCLUDED.meta_name, meta_order = EXCLUDED.meta_order, meta_description = EXCLUDED.meta_description, meta_link = EXCLUDED.meta_link `
	// run
	logf(sqlstr, m.MetaID, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink)
	if _, err := db.ExecContext(ctx, sqlstr, m.MetaID, m.MetaCategory, m.MetaName, m.MetaOrder, m.MetaDescription, m.MetaLink); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Metum] from the database.
func (m *Metum) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.meta ` +
		`WHERE meta_id = $1`
	// run
	logf(sqlstr, m.MetaID)
	if _, err := db.ExecContext(ctx, sqlstr, m.MetaID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MetumByMetaID retrieves a row from 'public.meta' as a [Metum].
//
// Generated from index 'meta_pkey'.
func MetumByMetaID(ctx context.Context, db DB, metaID int) (*Metum, error) {
	// query
	const sqlstr = `SELECT ` +
		`meta_id, meta_category, meta_name, meta_order, meta_description, meta_link ` +
		`FROM public.meta ` +
		`WHERE meta_id = $1`
	// run
	logf(sqlstr, metaID)
	m := Metum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, metaID).Scan(&m.MetaID, &m.MetaCategory, &m.MetaName, &m.MetaOrder, &m.MetaDescription, &m.MetaLink); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}
