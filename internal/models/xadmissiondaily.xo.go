package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// XAdmissionDaily represents a row from 'public.x_admission_daily'.
type XAdmissionDaily struct {
	ID          int            `json:"id"`           // id
	EncounterID sql.NullInt64  `json:"encounter_id"` // encounter_id
	NoteDate    sql.NullTime   `json:"note_date"`    // note_date
	NoteBy      sql.NullString `json:"note_by"`      // note_by
	Note        sql.NullString `json:"note"`         // note
	EnterBy     sql.NullInt64  `json:"enter_by"`     // enter_by
	EnterOn     sql.NullTime   `json:"enter_on"`     // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [XAdmissionDaily] exists in the database.
func (xad *XAdmissionDaily) Exists() bool {
	return xad._exists
}

// Deleted returns true when the [XAdmissionDaily] has been marked for deletion
// from the database.
func (xad *XAdmissionDaily) Deleted() bool {
	return xad._deleted
}

// Insert inserts the [XAdmissionDaily] to the database.
func (xad *XAdmissionDaily) Insert(ctx context.Context, db DB) error {
	switch {
	case xad._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case xad._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.x_admission_daily (` +
		`encounter_id, note_date, note_by, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn).Scan(&xad.ID); err != nil {
		return logerror(err)
	}
	// set exists
	xad._exists = true
	return nil
}

// Update updates a [XAdmissionDaily] in the database.
func (xad *XAdmissionDaily) Update(ctx context.Context, db DB) error {
	switch {
	case !xad._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case xad._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.x_admission_daily SET ` +
		`encounter_id = $1, note_date = $2, note_by = $3, note = $4, enter_by = $5, enter_on = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn, xad.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn, xad.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [XAdmissionDaily] to the database.
func (xad *XAdmissionDaily) Save(ctx context.Context, db DB) error {
	if xad.Exists() {
		return xad.Update(ctx, db)
	}
	return xad.Insert(ctx, db)
}

// Upsert performs an upsert for [XAdmissionDaily].
func (xad *XAdmissionDaily) Upsert(ctx context.Context, db DB) error {
	switch {
	case xad._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.x_admission_daily (` +
		`id, encounter_id, note_date, note_by, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, note_date = EXCLUDED.note_date, note_by = EXCLUDED.note_by, note = EXCLUDED.note, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, xad.ID, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, xad.ID, xad.EncounterID, xad.NoteDate, xad.NoteBy, xad.Note, xad.EnterBy, xad.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	xad._exists = true
	return nil
}

// Delete deletes the [XAdmissionDaily] from the database.
func (xad *XAdmissionDaily) Delete(ctx context.Context, db DB) error {
	switch {
	case !xad._exists: // doesn't exist
		return nil
	case xad._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.x_admission_daily ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, xad.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xad.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	xad._deleted = true
	return nil
}

// XAdmissionDailyByID retrieves a row from 'public.x_admission_daily' as a [XAdmissionDaily].
//
// Generated from index 'admission_daily_pkey'.
func XAdmissionDailyByID(ctx context.Context, db DB, id int) (*XAdmissionDaily, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, encounter_id, note_date, note_by, note, enter_by, enter_on ` +
		`FROM public.x_admission_daily ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	xad := XAdmissionDaily{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&xad.ID, &xad.EncounterID, &xad.NoteDate, &xad.NoteBy, &xad.Note, &xad.EnterBy, &xad.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &xad, nil
}
