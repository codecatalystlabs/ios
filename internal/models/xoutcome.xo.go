package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// XOutcome represents a row from 'public.x_outcome'.
type XOutcome struct {
	ID           int            `json:"id"`            // id
	EnrollmentID sql.NullInt64  `json:"enrollment_id"` // enrollment_id
	MovementDate sql.NullTime   `json:"movement_date"` // movement_date
	MovementType sql.NullInt64  `json:"movement_type"` // movement_type
	Note         sql.NullString `json:"note"`          // note
	EnterBy      sql.NullInt64  `json:"enter_by"`      // enter_by
	EnterOn      sql.NullTime   `json:"enter_on"`      // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [XOutcome] exists in the database.
func (xo *XOutcome) Exists() bool {
	return xo._exists
}

// Deleted returns true when the [XOutcome] has been marked for deletion
// from the database.
func (xo *XOutcome) Deleted() bool {
	return xo._deleted
}

// Insert inserts the [XOutcome] to the database.
func (xo *XOutcome) Insert(ctx context.Context, db DB) error {
	switch {
	case xo._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case xo._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.x_outcome (` +
		`enrollment_id, movement_date, movement_type, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn).Scan(&xo.ID); err != nil {
		return logerror(err)
	}
	// set exists
	xo._exists = true
	return nil
}

// Update updates a [XOutcome] in the database.
func (xo *XOutcome) Update(ctx context.Context, db DB) error {
	switch {
	case !xo._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case xo._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.x_outcome SET ` +
		`enrollment_id = $1, movement_date = $2, movement_type = $3, note = $4, enter_by = $5, enter_on = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn, xo.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn, xo.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [XOutcome] to the database.
func (xo *XOutcome) Save(ctx context.Context, db DB) error {
	if xo.Exists() {
		return xo.Update(ctx, db)
	}
	return xo.Insert(ctx, db)
}

// Upsert performs an upsert for [XOutcome].
func (xo *XOutcome) Upsert(ctx context.Context, db DB) error {
	switch {
	case xo._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.x_outcome (` +
		`id, enrollment_id, movement_date, movement_type, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`enrollment_id = EXCLUDED.enrollment_id, movement_date = EXCLUDED.movement_date, movement_type = EXCLUDED.movement_type, note = EXCLUDED.note, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, xo.ID, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, xo.ID, xo.EnrollmentID, xo.MovementDate, xo.MovementType, xo.Note, xo.EnterBy, xo.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	xo._exists = true
	return nil
}

// Delete deletes the [XOutcome] from the database.
func (xo *XOutcome) Delete(ctx context.Context, db DB) error {
	switch {
	case !xo._exists: // doesn't exist
		return nil
	case xo._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.x_outcome ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, xo.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xo.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	xo._deleted = true
	return nil
}

// XOutcomeByID retrieves a row from 'public.x_outcome' as a [XOutcome].
//
// Generated from index 'outcome_pkey'.
func XOutcomeByID(ctx context.Context, db DB, id int) (*XOutcome, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, enrollment_id, movement_date, movement_type, note, enter_by, enter_on ` +
		`FROM public.x_outcome ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	xo := XOutcome{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&xo.ID, &xo.EnrollmentID, &xo.MovementDate, &xo.MovementType, &xo.Note, &xo.EnterBy, &xo.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &xo, nil
}
