package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// UserLog represents a row from 'public.user_log'.
type UserLog struct {
	UserLogID int                           `json:"user_log_id"` // user_log_id
	UserID    sql.NullInt64                 `json:"user_id"`     // user_id
	UserLogin sql.NullTime `json:"user_login"`  // user_login
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserLog] exists in the database.
func (ul *UserLog) Exists() bool {
	return ul._exists
}

// Deleted returns true when the [UserLog] has been marked for deletion
// from the database.
func (ul *UserLog) Deleted() bool {
	return ul._deleted
}

// Insert inserts the [UserLog] to the database.
func (ul *UserLog) Insert(ctx context.Context, db DB) error {
	switch {
	case ul._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ul._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.user_log (` +
		`user_id, user_login` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING user_log_id`
	// run
	logf(sqlstr, ul.UserID, ul.UserLogin)
	if err := db.QueryRowContext(ctx, sqlstr, ul.UserID, ul.UserLogin).Scan(&ul.UserLogID); err != nil {
		return logerror(err)
	}
	// set exists
	ul._exists = true
	return nil
}

// Update updates a [UserLog] in the database.
func (ul *UserLog) Update(ctx context.Context, db DB) error {
	switch {
	case !ul._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ul._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.user_log SET ` +
		`user_id = $1, user_login = $2 ` +
		`WHERE user_log_id = $3`
	// run
	logf(sqlstr, ul.UserID, ul.UserLogin, ul.UserLogID)
	if _, err := db.ExecContext(ctx, sqlstr, ul.UserID, ul.UserLogin, ul.UserLogID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [UserLog] to the database.
func (ul *UserLog) Save(ctx context.Context, db DB) error {
	if ul.Exists() {
		return ul.Update(ctx, db)
	}
	return ul.Insert(ctx, db)
}

// Upsert performs an upsert for [UserLog].
func (ul *UserLog) Upsert(ctx context.Context, db DB) error {
	switch {
	case ul._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.user_log (` +
		`user_log_id, user_id, user_login` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (user_log_id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, user_login = EXCLUDED.user_login `
	// run
	logf(sqlstr, ul.UserLogID, ul.UserID, ul.UserLogin)
	if _, err := db.ExecContext(ctx, sqlstr, ul.UserLogID, ul.UserID, ul.UserLogin); err != nil {
		return logerror(err)
	}
	// set exists
	ul._exists = true
	return nil
}

// Delete deletes the [UserLog] from the database.
func (ul *UserLog) Delete(ctx context.Context, db DB) error {
	switch {
	case !ul._exists: // doesn't exist
		return nil
	case ul._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.user_log ` +
		`WHERE user_log_id = $1`
	// run
	logf(sqlstr, ul.UserLogID)
	if _, err := db.ExecContext(ctx, sqlstr, ul.UserLogID); err != nil {
		return logerror(err)
	}
	// set deleted
	ul._deleted = true
	return nil
}

// UserLogByUserLogID retrieves a row from 'public.user_log' as a [UserLog].
//
// Generated from index 'user_log_pkey'.
func UserLogByUserLogID(ctx context.Context, db DB, userLogID int) (*UserLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_log_id, user_id, user_login ` +
		`FROM public.user_log ` +
		`WHERE user_log_id = $1`
	// run
	logf(sqlstr, userLogID)
	ul := UserLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userLogID).Scan(&ul.UserLogID, &ul.UserID, &ul.UserLogin); err != nil {
		return nil, logerror(err)
	}
	return &ul, nil
}
