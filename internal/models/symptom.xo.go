package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Symptom represents a row from 'public.symptoms'.
type Symptom struct {
	ID                   int            `json:"id"`                    // id
	EncounterID          sql.NullInt64  `json:"encounter_id"`          // encounter_id
	OnSet                sql.NullTime   `json:"on_set"`                // on_set
	Note                 sql.NullString `json:"note"`                  // note
	SoreThroat           sql.NullInt64  `json:"sore_throat"`           // sore_throat
	MuscleAches          sql.NullInt64  `json:"muscle_aches"`          // muscle_aches
	Headache             sql.NullInt64  `json:"headache"`              // headache
	OcularSymptoms       sql.NullInt64  `json:"ocular_symptoms"`       // ocular_symptoms
	FatigueMalaise       sql.NullInt64  `json:"fatigue_malaise"`       // fatigue_malaise
	OralPain             sql.NullInt64  `json:"oral_pain"`             // oral_pain
	Nausea               sql.NullInt64  `json:"nausea"`                // nausea
	Vomiting             sql.NullInt64  `json:"vomiting"`              // vomiting
	Diarrhoea            sql.NullInt64  `json:"diarrhoea"`             // diarrhoea
	RectalPain           sql.NullInt64  `json:"rectal_pain"`           // rectal_pain
	Lymphadenopathy      sql.NullInt64  `json:"lymphadenopathy"`       // lymphadenopathy
	Proctitis            sql.NullInt64  `json:"proctitis"`             // proctitis
	PainSwallowing       sql.NullInt64  `json:"pain_swallowing"`       // pain_swallowing
	DifficultySwallowing sql.NullInt64  `json:"difficulty_swallowing"` // difficulty_swallowing
	PainUrination        sql.NullInt64  `json:"pain_urination"`        // pain_urination
	Urethritis           sql.NullInt64  `json:"urethritis"`            // urethritis
	ChestPain            sql.NullInt64  `json:"chest_pain"`            // chest_pain
	DecreasedUrine       sql.NullInt64  `json:"decreased_urine"`       // decreased_urine
	Dizzinessinteger     sql.NullInt64  `json:"dizzinessinteger"`      // dizzinessinteger
	JointPain            sql.NullInt64  `json:"joint_pain"`            // joint_pain
	Psychologic          sql.NullInt64  `json:"psychologic"`           // psychologic
	SymptomOther         sql.NullInt64  `json:"symptom_other"`         // symptom_other
	Axillary             sql.NullInt64  `json:"axillary"`              // axillary
	Cervical             sql.NullInt64  `json:"cervical"`              // cervical
	Inguinal             sql.NullInt64  `json:"inguinal"`              // inguinal
	LymphadenopathyOther sql.NullInt64  `json:"lymphadenopathy_other"` // lymphadenopathy_other
	OtherSymptom         sql.NullString `json:"other_symptom"`         // other_symptom
	OtherLymphadenopathy sql.NullString `json:"other_lymphadenopathy"` // other_lymphadenopathy
	EnterBy              sql.NullInt64  `json:"enter_by"`              // enter_by
	EnterOn              sql.NullTime   `json:"enter_on"`              // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Symptom] exists in the database.
func (s *Symptom) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Symptom] has been marked for deletion
// from the database.
func (s *Symptom) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Symptom] to the database.
func (s *Symptom) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.symptoms (` +
		`encounter_id, on_set, note, sore_throat, muscle_aches, headache, ocular_symptoms, fatigue_malaise, oral_pain, nausea, vomiting, diarrhoea, rectal_pain, lymphadenopathy, proctitis, pain_swallowing, difficulty_swallowing, pain_urination, urethritis, chest_pain, decreased_urine, dizzinessinteger, joint_pain, psychologic, symptom_other, axillary, cervical, inguinal, lymphadenopathy_other, other_symptom, other_lymphadenopathy, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33` +
		`) RETURNING id`
	// run
	logf(sqlstr, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn).Scan(&s.ID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Symptom] in the database.
func (s *Symptom) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.symptoms SET ` +
		`encounter_id = $1, on_set = $2, note = $3, sore_throat = $4, muscle_aches = $5, headache = $6, ocular_symptoms = $7, fatigue_malaise = $8, oral_pain = $9, nausea = $10, vomiting = $11, diarrhoea = $12, rectal_pain = $13, lymphadenopathy = $14, proctitis = $15, pain_swallowing = $16, difficulty_swallowing = $17, pain_urination = $18, urethritis = $19, chest_pain = $20, decreased_urine = $21, dizzinessinteger = $22, joint_pain = $23, psychologic = $24, symptom_other = $25, axillary = $26, cervical = $27, inguinal = $28, lymphadenopathy_other = $29, other_symptom = $30, other_lymphadenopathy = $31, enter_by = $32, enter_on = $33 ` +
		`WHERE id = $34`
	// run
	logf(sqlstr, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Symptom] to the database.
func (s *Symptom) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Symptom].
func (s *Symptom) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.symptoms (` +
		`id, encounter_id, on_set, note, sore_throat, muscle_aches, headache, ocular_symptoms, fatigue_malaise, oral_pain, nausea, vomiting, diarrhoea, rectal_pain, lymphadenopathy, proctitis, pain_swallowing, difficulty_swallowing, pain_urination, urethritis, chest_pain, decreased_urine, dizzinessinteger, joint_pain, psychologic, symptom_other, axillary, cervical, inguinal, lymphadenopathy_other, other_symptom, other_lymphadenopathy, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, on_set = EXCLUDED.on_set, note = EXCLUDED.note, sore_throat = EXCLUDED.sore_throat, muscle_aches = EXCLUDED.muscle_aches, headache = EXCLUDED.headache, ocular_symptoms = EXCLUDED.ocular_symptoms, fatigue_malaise = EXCLUDED.fatigue_malaise, oral_pain = EXCLUDED.oral_pain, nausea = EXCLUDED.nausea, vomiting = EXCLUDED.vomiting, diarrhoea = EXCLUDED.diarrhoea, rectal_pain = EXCLUDED.rectal_pain, lymphadenopathy = EXCLUDED.lymphadenopathy, proctitis = EXCLUDED.proctitis, pain_swallowing = EXCLUDED.pain_swallowing, difficulty_swallowing = EXCLUDED.difficulty_swallowing, pain_urination = EXCLUDED.pain_urination, urethritis = EXCLUDED.urethritis, chest_pain = EXCLUDED.chest_pain, decreased_urine = EXCLUDED.decreased_urine, dizzinessinteger = EXCLUDED.dizzinessinteger, joint_pain = EXCLUDED.joint_pain, psychologic = EXCLUDED.psychologic, symptom_other = EXCLUDED.symptom_other, axillary = EXCLUDED.axillary, cervical = EXCLUDED.cervical, inguinal = EXCLUDED.inguinal, lymphadenopathy_other = EXCLUDED.lymphadenopathy_other, other_symptom = EXCLUDED.other_symptom, other_lymphadenopathy = EXCLUDED.other_lymphadenopathy, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, s.ID, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.EncounterID, s.OnSet, s.Note, s.SoreThroat, s.MuscleAches, s.Headache, s.OcularSymptoms, s.FatigueMalaise, s.OralPain, s.Nausea, s.Vomiting, s.Diarrhoea, s.RectalPain, s.Lymphadenopathy, s.Proctitis, s.PainSwallowing, s.DifficultySwallowing, s.PainUrination, s.Urethritis, s.ChestPain, s.DecreasedUrine, s.Dizzinessinteger, s.JointPain, s.Psychologic, s.SymptomOther, s.Axillary, s.Cervical, s.Inguinal, s.LymphadenopathyOther, s.OtherSymptom, s.OtherLymphadenopathy, s.EnterBy, s.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Symptom] from the database.
func (s *Symptom) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.symptoms ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SymptomByID retrieves a row from 'public.symptoms' as a [Symptom].
//
// Generated from index 'symptoms_pkey'.
func SymptomByID(ctx context.Context, db DB, id int) (*Symptom, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, encounter_id, on_set, note, sore_throat, muscle_aches, headache, ocular_symptoms, fatigue_malaise, oral_pain, nausea, vomiting, diarrhoea, rectal_pain, lymphadenopathy, proctitis, pain_swallowing, difficulty_swallowing, pain_urination, urethritis, chest_pain, decreased_urine, dizzinessinteger, joint_pain, psychologic, symptom_other, axillary, cervical, inguinal, lymphadenopathy_other, other_symptom, other_lymphadenopathy, enter_by, enter_on ` +
		`FROM public.symptoms ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Symptom{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.EncounterID, &s.OnSet, &s.Note, &s.SoreThroat, &s.MuscleAches, &s.Headache, &s.OcularSymptoms, &s.FatigueMalaise, &s.OralPain, &s.Nausea, &s.Vomiting, &s.Diarrhoea, &s.RectalPain, &s.Lymphadenopathy, &s.Proctitis, &s.PainSwallowing, &s.DifficultySwallowing, &s.PainUrination, &s.Urethritis, &s.ChestPain, &s.DecreasedUrine, &s.Dizzinessinteger, &s.JointPain, &s.Psychologic, &s.SymptomOther, &s.Axillary, &s.Cervical, &s.Inguinal, &s.LymphadenopathyOther, &s.OtherSymptom, &s.OtherLymphadenopathy, &s.EnterBy, &s.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
