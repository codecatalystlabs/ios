package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// User represents a row from 'public.users'.
type User struct {
	UserID       int            `json:"user_id"`       // user_id
	UserName     sql.NullString `json:"user_name"`     // user_name
	UserPass     sql.NullString `json:"user_pass"`     // user_pass
	UserEmployee sql.NullInt64  `json:"user_employee"` // user_employee
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.users (` +
		`user_name, user_pass, user_employee` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING user_id`
	// run
	logf(sqlstr, u.UserName, u.UserPass, u.UserEmployee)
	if err := db.QueryRowContext(ctx, sqlstr, u.UserName, u.UserPass, u.UserEmployee).Scan(&u.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.users SET ` +
		`user_name = $1, user_pass = $2, user_employee = $3 ` +
		`WHERE user_id = $4`
	// run
	logf(sqlstr, u.UserName, u.UserPass, u.UserEmployee, u.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserName, u.UserPass, u.UserEmployee, u.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.users (` +
		`user_id, user_name, user_pass, user_employee` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (user_id) DO ` +
		`UPDATE SET ` +
		`user_name = EXCLUDED.user_name, user_pass = EXCLUDED.user_pass, user_employee = EXCLUDED.user_employee `
	// run
	logf(sqlstr, u.UserID, u.UserName, u.UserPass, u.UserEmployee)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserID, u.UserName, u.UserPass, u.UserEmployee); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.users ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, u.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByUserID retrieves a row from 'public.users' as a [User].
//
// Generated from index 'users_pkey'.
func UserByUserID(ctx context.Context, db DB, userID int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, user_name, user_pass, user_employee ` +
		`FROM public.users ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&u.UserID, &u.UserName, &u.UserPass, &u.UserEmployee); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
