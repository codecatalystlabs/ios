package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Vital represents a row from 'public.vitals'.
type Vital struct {
	VitalsID            int             `json:"vitals_id"`            // vitals_id
	EncounterID         sql.NullInt64   `json:"encounter_id"`         // encounter_id
	HeartRate           sql.NullFloat64 `json:"heart_rate"`           // heart_rate
	BpSystolic          sql.NullFloat64 `json:"bp_systolic"`          // bp_systolic
	BpDiastolic         sql.NullFloat64 `json:"bp_diastolic"`         // bp_diastolic
	CapillaryRefill     sql.NullInt64   `json:"capillary_refill"`     // capillary_refill
	RespiratoryRate     sql.NullFloat64 `json:"respiratory_rate"`     // respiratory_rate
	Saturation          sql.NullFloat64 `json:"saturation"`           // saturation
	Weight              sql.NullFloat64 `json:"weight"`               // weight
	Height              sql.NullFloat64 `json:"height"`               // height
	Temperature         sql.NullFloat64 `json:"temperature"`          // temperature
	LowestConsciousness sql.NullString  `json:"lowest_consciousness"` // lowest_consciousness
	MentalStatus        sql.NullString  `json:"mental_status"`        // mental_status
	Muac                sql.NullFloat64 `json:"muac"`                 // muac
	Bleeding            sql.NullInt64   `json:"bleeding"`             // bleeding
	Shock               sql.NullInt64   `json:"shock"`                // shock
	Meningitis          sql.NullInt64   `json:"meningitis"`           // meningitis
	Confusion           sql.NullInt64   `json:"confusion"`            // confusion
	Seizure             sql.NullInt64   `json:"seizure"`              // seizure
	Coma                sql.NullInt64   `json:"coma"`                 // coma
	Bacteraemia         sql.NullInt64   `json:"bacteraemia"`          // bacteraemia
	Hyperglycemia       sql.NullInt64   `json:"hyperglycemia"`        // hyperglycemia
	Hypoglycemia        sql.NullInt64   `json:"hypoglycemia"`         // hypoglycemia
	Other               sql.NullString  `json:"other"`                // other
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Vital] exists in the database.
func (v *Vital) Exists() bool {
	return v._exists
}

// Deleted returns true when the [Vital] has been marked for deletion
// from the database.
func (v *Vital) Deleted() bool {
	return v._deleted
}

// Insert inserts the [Vital] to the database.
func (v *Vital) Insert(ctx context.Context, db DB) error {
	switch {
	case v._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case v._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.vitals (` +
		`encounter_id, heart_rate, bp_systolic, bp_diastolic, capillary_refill, respiratory_rate, saturation, weight, height, temperature, lowest_consciousness, mental_status, muac, bleeding, shock, meningitis, confusion, seizure, coma, bacteraemia, hyperglycemia, hypoglycemia, other` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23` +
		`) RETURNING vitals_id`
	// run
	logf(sqlstr, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other)
	if err := db.QueryRowContext(ctx, sqlstr, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other).Scan(&v.VitalsID); err != nil {
		return logerror(err)
	}
	// set exists
	v._exists = true
	return nil
}

// Update updates a [Vital] in the database.
func (v *Vital) Update(ctx context.Context, db DB) error {
	switch {
	case !v._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case v._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.vitals SET ` +
		`encounter_id = $1, heart_rate = $2, bp_systolic = $3, bp_diastolic = $4, capillary_refill = $5, respiratory_rate = $6, saturation = $7, weight = $8, height = $9, temperature = $10, lowest_consciousness = $11, mental_status = $12, muac = $13, bleeding = $14, shock = $15, meningitis = $16, confusion = $17, seizure = $18, coma = $19, bacteraemia = $20, hyperglycemia = $21, hypoglycemia = $22, other = $23 ` +
		`WHERE vitals_id = $24`
	// run
	logf(sqlstr, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other, v.VitalsID)
	if _, err := db.ExecContext(ctx, sqlstr, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other, v.VitalsID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Vital] to the database.
func (v *Vital) Save(ctx context.Context, db DB) error {
	if v.Exists() {
		return v.Update(ctx, db)
	}
	return v.Insert(ctx, db)
}

// Upsert performs an upsert for [Vital].
func (v *Vital) Upsert(ctx context.Context, db DB) error {
	switch {
	case v._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.vitals (` +
		`vitals_id, encounter_id, heart_rate, bp_systolic, bp_diastolic, capillary_refill, respiratory_rate, saturation, weight, height, temperature, lowest_consciousness, mental_status, muac, bleeding, shock, meningitis, confusion, seizure, coma, bacteraemia, hyperglycemia, hypoglycemia, other` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`)` +
		` ON CONFLICT (vitals_id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, heart_rate = EXCLUDED.heart_rate, bp_systolic = EXCLUDED.bp_systolic, bp_diastolic = EXCLUDED.bp_diastolic, capillary_refill = EXCLUDED.capillary_refill, respiratory_rate = EXCLUDED.respiratory_rate, saturation = EXCLUDED.saturation, weight = EXCLUDED.weight, height = EXCLUDED.height, temperature = EXCLUDED.temperature, lowest_consciousness = EXCLUDED.lowest_consciousness, mental_status = EXCLUDED.mental_status, muac = EXCLUDED.muac, bleeding = EXCLUDED.bleeding, shock = EXCLUDED.shock, meningitis = EXCLUDED.meningitis, confusion = EXCLUDED.confusion, seizure = EXCLUDED.seizure, coma = EXCLUDED.coma, bacteraemia = EXCLUDED.bacteraemia, hyperglycemia = EXCLUDED.hyperglycemia, hypoglycemia = EXCLUDED.hypoglycemia, other = EXCLUDED.other `
	// run
	logf(sqlstr, v.VitalsID, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other)
	if _, err := db.ExecContext(ctx, sqlstr, v.VitalsID, v.EncounterID, v.HeartRate, v.BpSystolic, v.BpDiastolic, v.CapillaryRefill, v.RespiratoryRate, v.Saturation, v.Weight, v.Height, v.Temperature, v.LowestConsciousness, v.MentalStatus, v.Muac, v.Bleeding, v.Shock, v.Meningitis, v.Confusion, v.Seizure, v.Coma, v.Bacteraemia, v.Hyperglycemia, v.Hypoglycemia, v.Other); err != nil {
		return logerror(err)
	}
	// set exists
	v._exists = true
	return nil
}

// Delete deletes the [Vital] from the database.
func (v *Vital) Delete(ctx context.Context, db DB) error {
	switch {
	case !v._exists: // doesn't exist
		return nil
	case v._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.vitals ` +
		`WHERE vitals_id = $1`
	// run
	logf(sqlstr, v.VitalsID)
	if _, err := db.ExecContext(ctx, sqlstr, v.VitalsID); err != nil {
		return logerror(err)
	}
	// set deleted
	v._deleted = true
	return nil
}

// VitalByVitalsID retrieves a row from 'public.vitals' as a [Vital].
//
// Generated from index 'vitals_pkey'.
func VitalByVitalsID(ctx context.Context, db DB, vitalsID int) (*Vital, error) {
	// query
	const sqlstr = `SELECT ` +
		`vitals_id, encounter_id, heart_rate, bp_systolic, bp_diastolic, capillary_refill, respiratory_rate, saturation, weight, height, temperature, lowest_consciousness, mental_status, muac, bleeding, shock, meningitis, confusion, seizure, coma, bacteraemia, hyperglycemia, hypoglycemia, other ` +
		`FROM public.vitals ` +
		`WHERE vitals_id = $1`
	// run
	logf(sqlstr, vitalsID)
	v := Vital{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, vitalsID).Scan(&v.VitalsID, &v.EncounterID, &v.HeartRate, &v.BpSystolic, &v.BpDiastolic, &v.CapillaryRefill, &v.RespiratoryRate, &v.Saturation, &v.Weight, &v.Height, &v.Temperature, &v.LowestConsciousness, &v.MentalStatus, &v.Muac, &v.Bleeding, &v.Shock, &v.Meningitis, &v.Confusion, &v.Seizure, &v.Coma, &v.Bacteraemia, &v.Hyperglycemia, &v.Hypoglycemia, &v.Other); err != nil {
		return nil, logerror(err)
	}
	return &v, nil
}
