package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Employee represents a row from 'public.employee'.
type Employee struct {
	EmployeeID    int            `json:"employee_id"`    // employee_id
	EmployeeFname sql.NullString `json:"employee_fname"` // employee_fname
	EmployeeLname sql.NullString `json:"employee_lname"` // employee_lname
	EmployeeSex   sql.NullString `json:"employee_sex"`   // employee_sex
	EmployeeEmail sql.NullString `json:"employee_email"` // employee_email
	EmployeePhone sql.NullString `json:"employee_phone"` // employee_phone
	EmployeeCadre sql.NullString `json:"employee_cadre"` // employee_cadre
	Facility      sql.NullInt64  `json:"facility"`       // facility
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Employee] exists in the database.
func (e *Employee) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Employee] has been marked for deletion
// from the database.
func (e *Employee) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Employee] to the database.
func (e *Employee) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.employee (` +
		`employee_fname, employee_lname, employee_sex, employee_email, employee_phone, employee_cadre, facility` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING employee_id`
	// run
	logf(sqlstr, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility)
	if err := db.QueryRowContext(ctx, sqlstr, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility).Scan(&e.EmployeeID); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Employee] in the database.
func (e *Employee) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.employee SET ` +
		`employee_fname = $1, employee_lname = $2, employee_sex = $3, employee_email = $4, employee_phone = $5, employee_cadre = $6, facility = $7 ` +
		`WHERE employee_id = $8`
	// run
	logf(sqlstr, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility, e.EmployeeID)
	if _, err := db.ExecContext(ctx, sqlstr, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility, e.EmployeeID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Employee] to the database.
func (e *Employee) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Employee].
func (e *Employee) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.employee (` +
		`employee_id, employee_fname, employee_lname, employee_sex, employee_email, employee_phone, employee_cadre, facility` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (employee_id) DO ` +
		`UPDATE SET ` +
		`employee_fname = EXCLUDED.employee_fname, employee_lname = EXCLUDED.employee_lname, employee_sex = EXCLUDED.employee_sex, employee_email = EXCLUDED.employee_email, employee_phone = EXCLUDED.employee_phone, employee_cadre = EXCLUDED.employee_cadre, facility = EXCLUDED.facility `
	// run
	logf(sqlstr, e.EmployeeID, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility)
	if _, err := db.ExecContext(ctx, sqlstr, e.EmployeeID, e.EmployeeFname, e.EmployeeLname, e.EmployeeSex, e.EmployeeEmail, e.EmployeePhone, e.EmployeeCadre, e.Facility); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Employee] from the database.
func (e *Employee) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.employee ` +
		`WHERE employee_id = $1`
	// run
	logf(sqlstr, e.EmployeeID)
	if _, err := db.ExecContext(ctx, sqlstr, e.EmployeeID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EmployeeByEmployeeID retrieves a row from 'public.employee' as a [Employee].
//
// Generated from index 'employee_pkey'.
func EmployeeByEmployeeID(ctx context.Context, db DB, employeeID int) (*Employee, error) {
	// query
	const sqlstr = `SELECT ` +
		`employee_id, employee_fname, employee_lname, employee_sex, employee_email, employee_phone, employee_cadre, facility ` +
		`FROM public.employee ` +
		`WHERE employee_id = $1`
	// run
	logf(sqlstr, employeeID)
	e := Employee{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, employeeID).Scan(&e.EmployeeID, &e.EmployeeFname, &e.EmployeeLname, &e.EmployeeSex, &e.EmployeeEmail, &e.EmployeePhone, &e.EmployeeCadre, &e.Facility); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
