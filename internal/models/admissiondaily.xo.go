package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// AdmissionDaily represents a row from 'public.admission_daily'.
type AdmissionDaily struct {
	ID          int            `json:"id"`           // id
	EncounterID sql.NullInt64  `json:"encounter_id"` // encounter_id
	NoteDate    sql.NullTime   `json:"note_date"`    // note_date
	NoteBy      sql.NullString `json:"note_by"`      // note_by
	Note        sql.NullString `json:"note"`         // note
	EnterBy     sql.NullInt64  `json:"enter_by"`     // enter_by
	EnterOn     sql.NullTime   `json:"enter_on"`     // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AdmissionDaily] exists in the database.
func (ad *AdmissionDaily) Exists() bool {
	return ad._exists
}

// Deleted returns true when the [AdmissionDaily] has been marked for deletion
// from the database.
func (ad *AdmissionDaily) Deleted() bool {
	return ad._deleted
}

// Insert inserts the [AdmissionDaily] to the database.
func (ad *AdmissionDaily) Insert(ctx context.Context, db DB) error {
	switch {
	case ad._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ad._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.admission_daily (` +
		`encounter_id, note_date, note_by, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn).Scan(&ad.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ad._exists = true
	return nil
}

// Update updates a [AdmissionDaily] in the database.
func (ad *AdmissionDaily) Update(ctx context.Context, db DB) error {
	switch {
	case !ad._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ad._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.admission_daily SET ` +
		`encounter_id = $1, note_date = $2, note_by = $3, note = $4, enter_by = $5, enter_on = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn, ad.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn, ad.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AdmissionDaily] to the database.
func (ad *AdmissionDaily) Save(ctx context.Context, db DB) error {
	if ad.Exists() {
		return ad.Update(ctx, db)
	}
	return ad.Insert(ctx, db)
}

// Upsert performs an upsert for [AdmissionDaily].
func (ad *AdmissionDaily) Upsert(ctx context.Context, db DB) error {
	switch {
	case ad._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.admission_daily (` +
		`id, encounter_id, note_date, note_by, note, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, note_date = EXCLUDED.note_date, note_by = EXCLUDED.note_by, note = EXCLUDED.note, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, ad.ID, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, ad.ID, ad.EncounterID, ad.NoteDate, ad.NoteBy, ad.Note, ad.EnterBy, ad.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	ad._exists = true
	return nil
}

// Delete deletes the [AdmissionDaily] from the database.
func (ad *AdmissionDaily) Delete(ctx context.Context, db DB) error {
	switch {
	case !ad._exists: // doesn't exist
		return nil
	case ad._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.admission_daily ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ad.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ad.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ad._deleted = true
	return nil
}

// AdmissionDailyByID retrieves a row from 'public.admission_daily' as a [AdmissionDaily].
//
// Generated from index 'admission_daily_pkey'.
func AdmissionDailyByID(ctx context.Context, db DB, id int) (*AdmissionDaily, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, encounter_id, note_date, note_by, note, enter_by, enter_on ` +
		`FROM public.admission_daily ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ad := AdmissionDaily{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ad.ID, &ad.EncounterID, &ad.NoteDate, &ad.NoteBy, &ad.Note, &ad.EnterBy, &ad.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &ad, nil
}
