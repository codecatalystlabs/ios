package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// XEnrollment represents a row from 'public.x_enrollment'.
type XEnrollment struct {
	ID               int            `json:"id"`                // id
	CaseNo           sql.NullString `json:"case_no"`           // case_no
	LabNo            sql.NullString `json:"lab_no"`            // lab_no
	PatientNo        sql.NullString `json:"patient_no"`        // patient_no
	NationalID       sql.NullString `json:"national_id"`       // national_id
	OtherIDName      sql.NullString `json:"other_id_name"`     // other_id_name
	OtherIDValue     sql.NullString `json:"other_id_value"`    // other_id_value
	Firstname        sql.NullString `json:"firstname"`         // firstname
	Lastname         sql.NullString `json:"lastname"`          // lastname
	Sex              sql.NullInt64  `json:"sex"`               // sex
	AgeYear          sql.NullInt64  `json:"age_year"`          // age_year
	AgeMonthss       sql.NullInt64  `json:"age_monthss"`       // age_monthss
	AgeDays          sql.NullInt64  `json:"age_days"`          // age_days
	Dob              sql.NullTime   `json:"dob"`               // dob
	DateOfEnrolment  sql.NullTime   `json:"date_of_enrolment"` // date_of_enrolment
	FacilityID       sql.NullInt64  `json:"facility_id"`       // facility_id
	EnrolledBy       sql.NullInt64  `json:"enrolled_by"`       // enrolled_by
	Ishealthworker   sql.NullInt64  `json:"ishealthworker"`    // ishealthworker
	Islabworker      sql.NullInt64  `json:"islabworker"`       // islabworker
	PpeAtInfection   sql.NullInt64  `json:"ppe_at_infection"`  // ppe_at_infection
	Tribe            sql.NullString `json:"tribe"`             // tribe
	Pregnant         sql.NullInt64  `json:"pregnant"`          // pregnant
	GestationalWeek  sql.NullInt64  `json:"gestational_week"`  // gestational_week
	Lmnp             sql.NullTime   `json:"lmnp"`              // lmnp
	RecentlyPregnant sql.NullInt64  `json:"recently_pregnant"` // recently_pregnant
	Pregnant22       sql.NullInt64  `json:"pregnant_22"`       // pregnant_22
	TetanusVac       sql.NullInt64  `json:"tetanus_vac"`       // tetanus_vac
	KnownLink        sql.NullInt64  `json:"known_link"`        // known_link
	SexuallyActive   sql.NullInt64  `json:"sexually_active"`   // sexually_active
	SexualpartnerSex sql.NullInt64  `json:"sexualpartner_sex"` // sexualpartner_sex
	Travel           sql.NullInt64  `json:"travel"`            // travel
	Countries        sql.NullString `json:"countries"`         // countries
	AnimalContact    sql.NullInt64  `json:"animal_contact"`    // animal_contact
	AnimalDescribe   sql.NullString `json:"animal_describe"`   // animal_describe
	SymptomOnset     sql.NullTime   `json:"symptom_onset"`     // symptom_onset
	EnterBy          sql.NullInt64  `json:"enter_by"`          // enter_by
	EnterOn          sql.NullTime   `json:"enter_on"`          // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [XEnrollment] exists in the database.
func (xe *XEnrollment) Exists() bool {
	return xe._exists
}

// Deleted returns true when the [XEnrollment] has been marked for deletion
// from the database.
func (xe *XEnrollment) Deleted() bool {
	return xe._deleted
}

// Insert inserts the [XEnrollment] to the database.
func (xe *XEnrollment) Insert(ctx context.Context, db DB) error {
	switch {
	case xe._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case xe._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.x_enrollment (` +
		`case_no, lab_no, patient_no, national_id, other_id_name, other_id_value, firstname, lastname, sex, age_year, age_monthss, age_days, dob, date_of_enrolment, facility_id, enrolled_by, ishealthworker, islabworker, ppe_at_infection, tribe, pregnant, gestational_week, lmnp, recently_pregnant, pregnant_22, tetanus_vac, known_link, sexually_active, sexualpartner_sex, travel, countries, animal_contact, animal_describe, symptom_onset, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36` +
		`) RETURNING id`
	// run
	logf(sqlstr, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn).Scan(&xe.ID); err != nil {
		return logerror(err)
	}
	// set exists
	xe._exists = true
	return nil
}

// Update updates a [XEnrollment] in the database.
func (xe *XEnrollment) Update(ctx context.Context, db DB) error {
	switch {
	case !xe._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case xe._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.x_enrollment SET ` +
		`case_no = $1, lab_no = $2, patient_no = $3, national_id = $4, other_id_name = $5, other_id_value = $6, firstname = $7, lastname = $8, sex = $9, age_year = $10, age_monthss = $11, age_days = $12, dob = $13, date_of_enrolment = $14, facility_id = $15, enrolled_by = $16, ishealthworker = $17, islabworker = $18, ppe_at_infection = $19, tribe = $20, pregnant = $21, gestational_week = $22, lmnp = $23, recently_pregnant = $24, pregnant_22 = $25, tetanus_vac = $26, known_link = $27, sexually_active = $28, sexualpartner_sex = $29, travel = $30, countries = $31, animal_contact = $32, animal_describe = $33, symptom_onset = $34, enter_by = $35, enter_on = $36 ` +
		`WHERE id = $37`
	// run
	logf(sqlstr, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn, xe.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn, xe.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [XEnrollment] to the database.
func (xe *XEnrollment) Save(ctx context.Context, db DB) error {
	if xe.Exists() {
		return xe.Update(ctx, db)
	}
	return xe.Insert(ctx, db)
}

// Upsert performs an upsert for [XEnrollment].
func (xe *XEnrollment) Upsert(ctx context.Context, db DB) error {
	switch {
	case xe._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.x_enrollment (` +
		`id, case_no, lab_no, patient_no, national_id, other_id_name, other_id_value, firstname, lastname, sex, age_year, age_monthss, age_days, dob, date_of_enrolment, facility_id, enrolled_by, ishealthworker, islabworker, ppe_at_infection, tribe, pregnant, gestational_week, lmnp, recently_pregnant, pregnant_22, tetanus_vac, known_link, sexually_active, sexualpartner_sex, travel, countries, animal_contact, animal_describe, symptom_onset, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`case_no = EXCLUDED.case_no, lab_no = EXCLUDED.lab_no, patient_no = EXCLUDED.patient_no, national_id = EXCLUDED.national_id, other_id_name = EXCLUDED.other_id_name, other_id_value = EXCLUDED.other_id_value, firstname = EXCLUDED.firstname, lastname = EXCLUDED.lastname, sex = EXCLUDED.sex, age_year = EXCLUDED.age_year, age_monthss = EXCLUDED.age_monthss, age_days = EXCLUDED.age_days, dob = EXCLUDED.dob, date_of_enrolment = EXCLUDED.date_of_enrolment, facility_id = EXCLUDED.facility_id, enrolled_by = EXCLUDED.enrolled_by, ishealthworker = EXCLUDED.ishealthworker, islabworker = EXCLUDED.islabworker, ppe_at_infection = EXCLUDED.ppe_at_infection, tribe = EXCLUDED.tribe, pregnant = EXCLUDED.pregnant, gestational_week = EXCLUDED.gestational_week, lmnp = EXCLUDED.lmnp, recently_pregnant = EXCLUDED.recently_pregnant, pregnant_22 = EXCLUDED.pregnant_22, tetanus_vac = EXCLUDED.tetanus_vac, known_link = EXCLUDED.known_link, sexually_active = EXCLUDED.sexually_active, sexualpartner_sex = EXCLUDED.sexualpartner_sex, travel = EXCLUDED.travel, countries = EXCLUDED.countries, animal_contact = EXCLUDED.animal_contact, animal_describe = EXCLUDED.animal_describe, symptom_onset = EXCLUDED.symptom_onset, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, xe.ID, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, xe.ID, xe.CaseNo, xe.LabNo, xe.PatientNo, xe.NationalID, xe.OtherIDName, xe.OtherIDValue, xe.Firstname, xe.Lastname, xe.Sex, xe.AgeYear, xe.AgeMonthss, xe.AgeDays, xe.Dob, xe.DateOfEnrolment, xe.FacilityID, xe.EnrolledBy, xe.Ishealthworker, xe.Islabworker, xe.PpeAtInfection, xe.Tribe, xe.Pregnant, xe.GestationalWeek, xe.Lmnp, xe.RecentlyPregnant, xe.Pregnant22, xe.TetanusVac, xe.KnownLink, xe.SexuallyActive, xe.SexualpartnerSex, xe.Travel, xe.Countries, xe.AnimalContact, xe.AnimalDescribe, xe.SymptomOnset, xe.EnterBy, xe.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	xe._exists = true
	return nil
}

// Delete deletes the [XEnrollment] from the database.
func (xe *XEnrollment) Delete(ctx context.Context, db DB) error {
	switch {
	case !xe._exists: // doesn't exist
		return nil
	case xe._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.x_enrollment ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, xe.ID)
	if _, err := db.ExecContext(ctx, sqlstr, xe.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	xe._deleted = true
	return nil
}

// XEnrollmentByID retrieves a row from 'public.x_enrollment' as a [XEnrollment].
//
// Generated from index 'enrollment_pkey'.
func XEnrollmentByID(ctx context.Context, db DB, id int) (*XEnrollment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, case_no, lab_no, patient_no, national_id, other_id_name, other_id_value, firstname, lastname, sex, age_year, age_monthss, age_days, dob, date_of_enrolment, facility_id, enrolled_by, ishealthworker, islabworker, ppe_at_infection, tribe, pregnant, gestational_week, lmnp, recently_pregnant, pregnant_22, tetanus_vac, known_link, sexually_active, sexualpartner_sex, travel, countries, animal_contact, animal_describe, symptom_onset, enter_by, enter_on ` +
		`FROM public.x_enrollment ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	xe := XEnrollment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&xe.ID, &xe.CaseNo, &xe.LabNo, &xe.PatientNo, &xe.NationalID, &xe.OtherIDName, &xe.OtherIDValue, &xe.Firstname, &xe.Lastname, &xe.Sex, &xe.AgeYear, &xe.AgeMonthss, &xe.AgeDays, &xe.Dob, &xe.DateOfEnrolment, &xe.FacilityID, &xe.EnrolledBy, &xe.Ishealthworker, &xe.Islabworker, &xe.PpeAtInfection, &xe.Tribe, &xe.Pregnant, &xe.GestationalWeek, &xe.Lmnp, &xe.RecentlyPregnant, &xe.Pregnant22, &xe.TetanusVac, &xe.KnownLink, &xe.SexuallyActive, &xe.SexualpartnerSex, &xe.Travel, &xe.Countries, &xe.AnimalContact, &xe.AnimalDescribe, &xe.SymptomOnset, &xe.EnterBy, &xe.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &xe, nil
}
