package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Status represents a row from 'public.status'.
type Status struct {
	StatusID    int            `json:"status_id"`    // status_id
	ClientID    sql.NullInt64  `json:"client_id"`    // client_id
	StatusDate  sql.NullString `json:"status_date"`  // status_date
	Status      sql.NullString `json:"status"`       // status
	StatusNotes sql.NullString `json:"status_notes"` // status_notes
	UpdatedBy   sql.NullInt64  `json:"updated_by"`   // updated_by
	UpdatedOn   sql.NullString `json:"updated_on"`   // updated_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Status] exists in the database.
func (s *Status) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Status] has been marked for deletion
// from the database.
func (s *Status) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Status] to the database.
func (s *Status) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.status (` +
		`client_id, status_date, status, status_notes, updated_by, updated_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING status_id`
	// run
	logf(sqlstr, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn)
	if err := db.QueryRowContext(ctx, sqlstr, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn).Scan(&s.StatusID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Status] in the database.
func (s *Status) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.status SET ` +
		`client_id = $1, status_date = $2, status = $3, status_notes = $4, updated_by = $5, updated_on = $6 ` +
		`WHERE status_id = $7`
	// run
	logf(sqlstr, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn, s.StatusID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn, s.StatusID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Status] to the database.
func (s *Status) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Status].
func (s *Status) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.status (` +
		`status_id, client_id, status_date, status, status_notes, updated_by, updated_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (status_id) DO ` +
		`UPDATE SET ` +
		`client_id = EXCLUDED.client_id, status_date = EXCLUDED.status_date, status = EXCLUDED.status, status_notes = EXCLUDED.status_notes, updated_by = EXCLUDED.updated_by, updated_on = EXCLUDED.updated_on `
	// run
	logf(sqlstr, s.StatusID, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn)
	if _, err := db.ExecContext(ctx, sqlstr, s.StatusID, s.ClientID, s.StatusDate, s.Status, s.StatusNotes, s.UpdatedBy, s.UpdatedOn); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Status] from the database.
func (s *Status) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.status ` +
		`WHERE status_id = $1`
	// run
	logf(sqlstr, s.StatusID)
	if _, err := db.ExecContext(ctx, sqlstr, s.StatusID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// StatusByStatusID retrieves a row from 'public.status' as a [Status].
//
// Generated from index 'status_pkey'.
func StatusByStatusID(ctx context.Context, db DB, statusID int) (*Status, error) {
	// query
	const sqlstr = `SELECT ` +
		`status_id, client_id, status_date, status, status_notes, updated_by, updated_on ` +
		`FROM public.status ` +
		`WHERE status_id = $1`
	// run
	logf(sqlstr, statusID)
	s := Status{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, statusID).Scan(&s.StatusID, &s.ClientID, &s.StatusDate, &s.Status, &s.StatusNotes, &s.UpdatedBy, &s.UpdatedOn); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
