package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Comorbidity represents a row from 'public.comorbidities'.
type Comorbidity struct {
	ID                                int             `json:"id"`                                  // id
	EncounterID                       sql.NullInt64   `json:"encounter_id"`                        // encounter_id
	Note                              sql.NullString  `json:"note"`                                // note
	ChronicCardiac                    sql.NullInt64   `json:"chronic_cardiac"`                     // chronic_cardiac
	Hypertension                      sql.NullInt64   `json:"hypertension"`                        // hypertension
	ChronicPulmonary                  sql.NullInt64   `json:"chronic_pulmonary"`                   // chronic_pulmonary
	Asthma                            sql.NullInt64   `json:"asthma"`                              // asthma
	ChronicKidney                     sql.NullInt64   `json:"chronic_kidney"`                      // chronic_kidney
	ChronicLiver                      sql.NullInt64   `json:"chronic_liver"`                       // chronic_liver
	ChronicNeurological               sql.NullInt64   `json:"chronic_neurological"`                // chronic_neurological
	Alcohol                           sql.NullInt64   `json:"alcohol"`                             // alcohol
	SexuallyTransmitted               sql.NullInt64   `json:"sexually_transmitted"`                // sexually_transmitted
	Diabetes                          sql.NullInt64   `json:"diabetes"`                            // diabetes
	Smoking                           sql.NullInt64   `json:"smoking"`                             // smoking
	TuberculosisActive                sql.NullInt64   `json:"tuberculosis_active"`                 // tuberculosis_active
	TuberculosisPrevious              sql.NullInt64   `json:"tuberculosis_previous"`               // tuberculosis_previous
	Asplenia                          sql.NullInt64   `json:"asplenia"`                            // asplenia
	MalignantNeoplasm                 sql.NullInt64   `json:"malignant_neoplasm"`                  // malignant_neoplasm
	NeoplasmPresent                   sql.NullInt64   `json:"neoplasm_present"`                    // neoplasm_present
	Immunosuppressants                sql.NullInt64   `json:"immunosuppressants"`                  // immunosuppressants
	ImmunosuppressantsSpecify         sql.NullString  `json:"immunosuppressants_specify"`          // immunosuppressants_specify
	ImmunosuppressiveCondition        sql.NullInt64   `json:"immunosuppressive_condition"`         // immunosuppressive_condition
	ImmunosuppressiveConditionSpecify sql.NullString  `json:"immunosuppressive_condition_specify"` // immunosuppressive_condition_specify
	NGonorrhoeae                      sql.NullInt64   `json:"n_gonorrhoeae"`                       // n_gonorrhoeae
	Syphilis                          sql.NullInt64   `json:"syphilis"`                            // syphilis
	Hsv                               sql.NullInt64   `json:"hsv"`                                 // hsv
	Chlamydia                         sql.NullInt64   `json:"chlamydia"`                           // chlamydia
	SexuallyOthers                    sql.NullString  `json:"sexually_others"`                     // sexually_others
	Hiv                               sql.NullInt64   `json:"hiv"`                                 // hiv
	ArtRegiment                       sql.NullString  `json:"art_regiment"`                        // art_regiment
	Cd4                               sql.NullFloat64 `json:"cd4"`                                 // cd4
	ViralLoad                         sql.NullFloat64 `json:"viral_load"`                          // viral_load
	EnterBy                           sql.NullInt64   `json:"enter_by"`                            // enter_by
	EnterOn                           sql.NullTime    `json:"enter_on"`                            // enter_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Comorbidity] exists in the database.
func (c *Comorbidity) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Comorbidity] has been marked for deletion
// from the database.
func (c *Comorbidity) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Comorbidity] to the database.
func (c *Comorbidity) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.comorbidities (` +
		`encounter_id, note, chronic_cardiac, hypertension, chronic_pulmonary, asthma, chronic_kidney, chronic_liver, chronic_neurological, alcohol, sexually_transmitted, diabetes, smoking, tuberculosis_active, tuberculosis_previous, asplenia, malignant_neoplasm, neoplasm_present, immunosuppressants, immunosuppressants_specify, immunosuppressive_condition, immunosuppressive_condition_specify, n_gonorrhoeae, syphilis, hsv, chlamydia, sexually_others, hiv, art_regiment, cd4, viral_load, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33` +
		`) RETURNING id`
	// run
	logf(sqlstr, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn)
	if err := db.QueryRowContext(ctx, sqlstr, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn).Scan(&c.ID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Comorbidity] in the database.
func (c *Comorbidity) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.comorbidities SET ` +
		`encounter_id = $1, note = $2, chronic_cardiac = $3, hypertension = $4, chronic_pulmonary = $5, asthma = $6, chronic_kidney = $7, chronic_liver = $8, chronic_neurological = $9, alcohol = $10, sexually_transmitted = $11, diabetes = $12, smoking = $13, tuberculosis_active = $14, tuberculosis_previous = $15, asplenia = $16, malignant_neoplasm = $17, neoplasm_present = $18, immunosuppressants = $19, immunosuppressants_specify = $20, immunosuppressive_condition = $21, immunosuppressive_condition_specify = $22, n_gonorrhoeae = $23, syphilis = $24, hsv = $25, chlamydia = $26, sexually_others = $27, hiv = $28, art_regiment = $29, cd4 = $30, viral_load = $31, enter_by = $32, enter_on = $33 ` +
		`WHERE id = $34`
	// run
	logf(sqlstr, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Comorbidity] to the database.
func (c *Comorbidity) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Comorbidity].
func (c *Comorbidity) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.comorbidities (` +
		`id, encounter_id, note, chronic_cardiac, hypertension, chronic_pulmonary, asthma, chronic_kidney, chronic_liver, chronic_neurological, alcohol, sexually_transmitted, diabetes, smoking, tuberculosis_active, tuberculosis_previous, asplenia, malignant_neoplasm, neoplasm_present, immunosuppressants, immunosuppressants_specify, immunosuppressive_condition, immunosuppressive_condition_specify, n_gonorrhoeae, syphilis, hsv, chlamydia, sexually_others, hiv, art_regiment, cd4, viral_load, enter_by, enter_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`encounter_id = EXCLUDED.encounter_id, note = EXCLUDED.note, chronic_cardiac = EXCLUDED.chronic_cardiac, hypertension = EXCLUDED.hypertension, chronic_pulmonary = EXCLUDED.chronic_pulmonary, asthma = EXCLUDED.asthma, chronic_kidney = EXCLUDED.chronic_kidney, chronic_liver = EXCLUDED.chronic_liver, chronic_neurological = EXCLUDED.chronic_neurological, alcohol = EXCLUDED.alcohol, sexually_transmitted = EXCLUDED.sexually_transmitted, diabetes = EXCLUDED.diabetes, smoking = EXCLUDED.smoking, tuberculosis_active = EXCLUDED.tuberculosis_active, tuberculosis_previous = EXCLUDED.tuberculosis_previous, asplenia = EXCLUDED.asplenia, malignant_neoplasm = EXCLUDED.malignant_neoplasm, neoplasm_present = EXCLUDED.neoplasm_present, immunosuppressants = EXCLUDED.immunosuppressants, immunosuppressants_specify = EXCLUDED.immunosuppressants_specify, immunosuppressive_condition = EXCLUDED.immunosuppressive_condition, immunosuppressive_condition_specify = EXCLUDED.immunosuppressive_condition_specify, n_gonorrhoeae = EXCLUDED.n_gonorrhoeae, syphilis = EXCLUDED.syphilis, hsv = EXCLUDED.hsv, chlamydia = EXCLUDED.chlamydia, sexually_others = EXCLUDED.sexually_others, hiv = EXCLUDED.hiv, art_regiment = EXCLUDED.art_regiment, cd4 = EXCLUDED.cd4, viral_load = EXCLUDED.viral_load, enter_by = EXCLUDED.enter_by, enter_on = EXCLUDED.enter_on `
	// run
	logf(sqlstr, c.ID, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.EncounterID, c.Note, c.ChronicCardiac, c.Hypertension, c.ChronicPulmonary, c.Asthma, c.ChronicKidney, c.ChronicLiver, c.ChronicNeurological, c.Alcohol, c.SexuallyTransmitted, c.Diabetes, c.Smoking, c.TuberculosisActive, c.TuberculosisPrevious, c.Asplenia, c.MalignantNeoplasm, c.NeoplasmPresent, c.Immunosuppressants, c.ImmunosuppressantsSpecify, c.ImmunosuppressiveCondition, c.ImmunosuppressiveConditionSpecify, c.NGonorrhoeae, c.Syphilis, c.Hsv, c.Chlamydia, c.SexuallyOthers, c.Hiv, c.ArtRegiment, c.Cd4, c.ViralLoad, c.EnterBy, c.EnterOn); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Comorbidity] from the database.
func (c *Comorbidity) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.comorbidities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// ComorbidityByID retrieves a row from 'public.comorbidities' as a [Comorbidity].
//
// Generated from index 'comorbidities_pkey'.
func ComorbidityByID(ctx context.Context, db DB, id int) (*Comorbidity, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, encounter_id, note, chronic_cardiac, hypertension, chronic_pulmonary, asthma, chronic_kidney, chronic_liver, chronic_neurological, alcohol, sexually_transmitted, diabetes, smoking, tuberculosis_active, tuberculosis_previous, asplenia, malignant_neoplasm, neoplasm_present, immunosuppressants, immunosuppressants_specify, immunosuppressive_condition, immunosuppressive_condition_specify, n_gonorrhoeae, syphilis, hsv, chlamydia, sexually_others, hiv, art_regiment, cd4, viral_load, enter_by, enter_on ` +
		`FROM public.comorbidities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := Comorbidity{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.EncounterID, &c.Note, &c.ChronicCardiac, &c.Hypertension, &c.ChronicPulmonary, &c.Asthma, &c.ChronicKidney, &c.ChronicLiver, &c.ChronicNeurological, &c.Alcohol, &c.SexuallyTransmitted, &c.Diabetes, &c.Smoking, &c.TuberculosisActive, &c.TuberculosisPrevious, &c.Asplenia, &c.MalignantNeoplasm, &c.NeoplasmPresent, &c.Immunosuppressants, &c.ImmunosuppressantsSpecify, &c.ImmunosuppressiveCondition, &c.ImmunosuppressiveConditionSpecify, &c.NGonorrhoeae, &c.Syphilis, &c.Hsv, &c.Chlamydia, &c.SexuallyOthers, &c.Hiv, &c.ArtRegiment, &c.Cd4, &c.ViralLoad, &c.EnterBy, &c.EnterOn); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
